[
  {
    "objectID": "mito.html",
    "href": "mito.html",
    "title": "Mito",
    "section": "",
    "text": "!pip list | grep mitosheet\n\nmitosheet                     0.1.530\n\n\n\nimport mitosheet\n\n\nmitosheet.sheet(analysis_to_replay=\"id-qdjqkelpwx\")\n\n\n\n        \n    \n\n\nfrom mitosheet.public.v3 import *; # Analysis Name:id-qdjqkelpwx; import pandas as pd\n\nImported salaries.csv\nsalaries = pd.read_csv(r’/home/ben/BENEDICT_Only/Benedict_Projects/Benedict_ML/ML/nbs/Data/salaries.csv’)\n\n\nsort the column company in ascending order\nsalaries.sort_values(‘company’, ascending=True, inplace=True)\n\n\n\n\n Back to top"
  },
  {
    "objectID": "pytube.html",
    "href": "pytube.html",
    "title": "Pytube",
    "section": "",
    "text": "!pip list | grep pytube\n\npytube                        15.0.0\n\n\n\nfrom pytube import YouTube\nyt = YouTube('https://www.youtube.com/watch?v=dQw4w9WgXcQ')\n\n\nyt.title\n\n'Never Gonna Give You Up'\n\n\n\nyt.thumbnail_url\n\n'https://i.ytimg.com/vi/dQw4w9WgXcQ/hq720.jpg?sqp=-oaymwEXCNUGEOADIAQqCwjVARCqCBh4INgESFo&rs=AOn4CLBX-HcaMSEAucUr5J0qD5nEyiPAoQ'\n\n\n\nhigh_yt = yt.streams.get_highest_resolution()\n\n\nhigh_yt.download(output_path = 'Data')\n\n'/home/ben/BENEDICT_Only/Benedict_Projects/Benedict_ML/MLtools/nbs/Data/Never Gonna Give You Up.mp4'\n\n\n\nfor streams in yt.streams:\n    print(streams)\n\n&lt;Stream: itag=\"17\" mime_type=\"video/3gpp\" res=\"144p\" fps=\"6fps\" vcodec=\"mp4v.20.3\" acodec=\"mp4a.40.2\" progressive=\"True\" type=\"video\"&gt;\n&lt;Stream: itag=\"18\" mime_type=\"video/mp4\" res=\"360p\" fps=\"25fps\" vcodec=\"avc1.42001E\" acodec=\"mp4a.40.2\" progressive=\"True\" type=\"video\"&gt;\n&lt;Stream: itag=\"22\" mime_type=\"video/mp4\" res=\"720p\" fps=\"25fps\" vcodec=\"avc1.64001F\" acodec=\"mp4a.40.2\" progressive=\"True\" type=\"video\"&gt;\n&lt;Stream: itag=\"137\" mime_type=\"video/mp4\" res=\"1080p\" fps=\"25fps\" vcodec=\"avc1.640028\" progressive=\"False\" type=\"video\"&gt;\n&lt;Stream: itag=\"248\" mime_type=\"video/webm\" res=\"1080p\" fps=\"25fps\" vcodec=\"vp9\" progressive=\"False\" type=\"video\"&gt;\n&lt;Stream: itag=\"136\" mime_type=\"video/mp4\" res=\"720p\" fps=\"25fps\" vcodec=\"avc1.4d401f\" progressive=\"False\" type=\"video\"&gt;\n&lt;Stream: itag=\"247\" mime_type=\"video/webm\" res=\"720p\" fps=\"25fps\" vcodec=\"vp9\" progressive=\"False\" type=\"video\"&gt;\n&lt;Stream: itag=\"135\" mime_type=\"video/mp4\" res=\"480p\" fps=\"25fps\" vcodec=\"avc1.4d401e\" progressive=\"False\" type=\"video\"&gt;\n&lt;Stream: itag=\"244\" mime_type=\"video/webm\" res=\"480p\" fps=\"25fps\" vcodec=\"vp9\" progressive=\"False\" type=\"video\"&gt;\n&lt;Stream: itag=\"134\" mime_type=\"video/mp4\" res=\"360p\" fps=\"25fps\" vcodec=\"avc1.4d401e\" progressive=\"False\" type=\"video\"&gt;\n&lt;Stream: itag=\"243\" mime_type=\"video/webm\" res=\"360p\" fps=\"25fps\" vcodec=\"vp9\" progressive=\"False\" type=\"video\"&gt;\n&lt;Stream: itag=\"133\" mime_type=\"video/mp4\" res=\"240p\" fps=\"25fps\" vcodec=\"avc1.4d4015\" progressive=\"False\" type=\"video\"&gt;\n&lt;Stream: itag=\"242\" mime_type=\"video/webm\" res=\"240p\" fps=\"25fps\" vcodec=\"vp9\" progressive=\"False\" type=\"video\"&gt;\n&lt;Stream: itag=\"160\" mime_type=\"video/mp4\" res=\"144p\" fps=\"25fps\" vcodec=\"avc1.4d400c\" progressive=\"False\" type=\"video\"&gt;\n&lt;Stream: itag=\"278\" mime_type=\"video/webm\" res=\"144p\" fps=\"25fps\" vcodec=\"vp9\" progressive=\"False\" type=\"video\"&gt;\n&lt;Stream: itag=\"139\" mime_type=\"audio/mp4\" abr=\"48kbps\" acodec=\"mp4a.40.5\" progressive=\"False\" type=\"audio\"&gt;\n&lt;Stream: itag=\"140\" mime_type=\"audio/mp4\" abr=\"128kbps\" acodec=\"mp4a.40.2\" progressive=\"False\" type=\"audio\"&gt;\n&lt;Stream: itag=\"249\" mime_type=\"audio/webm\" abr=\"50kbps\" acodec=\"opus\" progressive=\"False\" type=\"audio\"&gt;\n&lt;Stream: itag=\"250\" mime_type=\"audio/webm\" abr=\"70kbps\" acodec=\"opus\" progressive=\"False\" type=\"audio\"&gt;\n&lt;Stream: itag=\"251\" mime_type=\"audio/webm\" abr=\"160kbps\" acodec=\"opus\" progressive=\"False\" type=\"audio\"&gt;\n\n\n\nyt.streams\\\n.filter(progressive=True, file_extension='mp4')\\\n.order_by('resolution')\\\n.desc().first().download(output_path = 'Data')\n\n'/home/ben/BENEDICT_Only/Benedict_Projects/Benedict_ML/MLtools/nbs/Data/Never Gonna Give You Up.mp4'\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "altair.html",
    "href": "altair.html",
    "title": "Altair",
    "section": "",
    "text": "pip install altair vega_datasets\n\n!pip list | grep altair\n!pip list | grep vega_datasets\n!pip list | grep pandas\n!pip list | grep geopandas\n\naltair                        5.1.2\ngeopandas                     0.14.1\npandas                        1.5.3\ngeopandas                     0.14.1\n\n\n\nimport altair as alt\nimport numpy as np\nimport pandas as pd\n\n# Compute x^2 + y^2 across a 2D grid\nx, y = np.meshgrid(range(-5, 5), range(-5, 5))\nz = x ** 2 + y ** 2\n\n# Convert this grid to columnar data expected by Altair\nsource = pd.DataFrame({'x': x.ravel(),\n                     'y': y.ravel(),\n                     'z': z.ravel()})\n\nalt.Chart(source).mark_rect().encode(\n    x='x:O',\n    y='y:O',\n    color='z:Q'\n)\n\n\n\n\n\n\n\n\nimport altair as alt\nimport pandas as pd\n\nsource = pd.DataFrame(\n    [\n        {\"a\": \"a1\", \"b\": \"b1\", \"c\": \"x\", \"p\": \"0.14\"},\n        {\"a\": \"a1\", \"b\": \"b1\", \"c\": \"y\", \"p\": \"0.60\"},\n        {\"a\": \"a1\", \"b\": \"b1\", \"c\": \"z\", \"p\": \"0.03\"},\n        {\"a\": \"a1\", \"b\": \"b2\", \"c\": \"x\", \"p\": \"0.80\"},\n        {\"a\": \"a1\", \"b\": \"b2\", \"c\": \"y\", \"p\": \"0.38\"},\n        {\"a\": \"a1\", \"b\": \"b2\", \"c\": \"z\", \"p\": \"0.55\"},\n        {\"a\": \"a1\", \"b\": \"b3\", \"c\": \"x\", \"p\": \"0.11\"},\n        {\"a\": \"a1\", \"b\": \"b3\", \"c\": \"y\", \"p\": \"0.58\"},\n        {\"a\": \"a1\", \"b\": \"b3\", \"c\": \"z\", \"p\": \"0.79\"},\n        {\"a\": \"a2\", \"b\": \"b1\", \"c\": \"x\", \"p\": \"0.83\"},\n        {\"a\": \"a2\", \"b\": \"b1\", \"c\": \"y\", \"p\": \"0.87\"},\n        {\"a\": \"a2\", \"b\": \"b1\", \"c\": \"z\", \"p\": \"0.67\"},\n        {\"a\": \"a2\", \"b\": \"b2\", \"c\": \"x\", \"p\": \"0.97\"},\n        {\"a\": \"a2\", \"b\": \"b2\", \"c\": \"y\", \"p\": \"0.84\"},\n        {\"a\": \"a2\", \"b\": \"b2\", \"c\": \"z\", \"p\": \"0.90\"},\n        {\"a\": \"a2\", \"b\": \"b3\", \"c\": \"x\", \"p\": \"0.74\"},\n        {\"a\": \"a2\", \"b\": \"b3\", \"c\": \"y\", \"p\": \"0.64\"},\n        {\"a\": \"a2\", \"b\": \"b3\", \"c\": \"z\", \"p\": \"0.19\"},\n        {\"a\": \"a3\", \"b\": \"b1\", \"c\": \"x\", \"p\": \"0.57\"},\n        {\"a\": \"a3\", \"b\": \"b1\", \"c\": \"y\", \"p\": \"0.35\"},\n        {\"a\": \"a3\", \"b\": \"b1\", \"c\": \"z\", \"p\": \"0.49\"},\n        {\"a\": \"a3\", \"b\": \"b2\", \"c\": \"x\", \"p\": \"0.91\"},\n        {\"a\": \"a3\", \"b\": \"b2\", \"c\": \"y\", \"p\": \"0.38\"},\n        {\"a\": \"a3\", \"b\": \"b2\", \"c\": \"z\", \"p\": \"0.91\"},\n        {\"a\": \"a3\", \"b\": \"b3\", \"c\": \"x\", \"p\": \"0.99\"},\n        {\"a\": \"a3\", \"b\": \"b3\", \"c\": \"y\", \"p\": \"0.80\"},\n        {\"a\": \"a3\", \"b\": \"b3\", \"c\": \"z\", \"p\": \"0.37\"},\n    ]\n)\n\nalt.Chart(source, width=60, height=alt.Step(8)).mark_bar().encode(\n    alt.Y(\"c:N\").axis(None),\n    alt.X(\"p:Q\").title(None).axis(format=\"%\"),\n    alt.Color(\"c:N\").title(\"settings\").legend(orient=\"bottom\", titleOrient=\"left\"),\n    alt.Row(\"a:N\").title(\"Factor A\").header(labelAngle=0),\n    alt.Column(\"b:N\").title(\"Factor B\"),\n).interactive()\n\n\n\n\n\n\n\n\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.stocks()\n\nhighlight = alt.selection_point(on='mouseover', fields=['symbol'], nearest=True)\n\nbase = alt.Chart(source).encode(\n    x='date:T',\n    y='price:Q',\n    color='symbol:N'\n)\n\npoints = base.mark_circle().encode(\n    opacity=alt.value(0)\n).add_params(\n    highlight\n).properties(\n    width=600\n)\n\nlines = base.mark_line().encode(\n    size=alt.condition(~highlight, alt.value(1), alt.value(3))\n)\n\npoints + lines\n\n\n\n\n\n\n\n\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.unemployment_across_industries.url\n\nselection = alt.selection_point(fields=['series'], bind='legend')\n\nalt.Chart(source).mark_area().encode(\n    alt.X('yearmonth(date):T').axis(domain=False, format='%Y', tickSize=0),\n    alt.Y('sum(count):Q').stack('center').axis(None),\n    alt.Color('series:N').scale(scheme='category20b'),\n    opacity=alt.condition(selection, alt.value(1), alt.value(0.2))\n).add_params(\n    selection\n)\n\n\n\n\n\n\n\n\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars()\n\nalt.Chart(source).mark_circle().encode(\n    alt.X(alt.repeat(\"column\"), type='quantitative'),\n    alt.Y(alt.repeat(\"row\"), type='quantitative'),\n    color='Origin:N'\n).properties(\n    width=150,\n    height=150\n).repeat(\n    row=['Horsepower', 'Acceleration', 'Miles_per_Gallon'],\n    column=['Miles_per_Gallon', 'Acceleration', 'Horsepower']\n).interactive()\n\n\n\n\n\n\n\n\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.seattle_weather.url\n\nstep = 20\noverlap = 1\n\nalt.Chart(source, height=step).transform_timeunit(\n    Month='month(date)'\n).transform_joinaggregate(\n    mean_temp='mean(temp_max)', groupby=['Month']\n).transform_bin(\n    ['bin_max', 'bin_min'], 'temp_max'\n).transform_aggregate(\n    value='count()', groupby=['Month', 'mean_temp', 'bin_min', 'bin_max']\n).transform_impute(\n    impute='value', groupby=['Month', 'mean_temp'], key='bin_min', value=0\n).mark_area(\n    interpolate='monotone',\n    fillOpacity=0.8,\n    stroke='lightgray',\n    strokeWidth=0.5\n).encode(\n    alt.X('bin_min:Q')\n        .bin('binned')\n        .title('Maximum Daily Temperature (C)'),\n    alt.Y('value:Q')\n        .axis(None)\n        .scale(range=[step, -step * overlap]),\n    alt.Fill('mean_temp:Q')\n        .legend(None)\n        .scale(domain=[30, 5], scheme='redyellowblue')\n).facet(\n    row=alt.Row('Month:T')\n        .title(None)\n        .header(labelAngle=0, labelAlign='left', format='%B')\n).properties(\n    title='Seattle Weather',\n    bounds='flush'\n).configure_facet(\n    spacing=0\n).configure_view(\n    stroke=None\n).configure_title(\n    anchor='end'\n)\n\n\n\n\n\n\n\n\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.seattle_weather()\n\nalt.Chart(source, title=\"Daily Max Temperatures (C) in Seattle, WA\").mark_rect().encode(\n    alt.X(\"date(date):O\").title(\"Day\").axis(format=\"%e\", labelAngle=0),\n    alt.Y(\"month(date):O\").title(\"Month\"),\n    alt.Color(\"max(temp_max)\").title(None),\n    tooltip=[\n        alt.Tooltip(\"monthdate(date)\", title=\"Date\"),\n        alt.Tooltip(\"max(temp_max)\", title=\"Max Temp\"),\n    ],\n).configure_view(\n    step=13,\n    strokeWidth=0\n).configure_axis(\n    domain=False\n)\n\n\n\n\n\n\n\n\nimport altair as alt\nfrom vega_datasets import data\n\nstates = alt.topo_feature(data.us_10m.url, 'states')\nsource = data.income.url\n\nalt.Chart(source).mark_geoshape().encode(\n    shape='geo:G',\n    color='pct:Q',\n    tooltip=['name:N', 'pct:Q'],\n    facet=alt.Facet('group:N', columns=2),\n).transform_lookup(\n    lookup='id',\n    from_=alt.LookupData(data=states, key='id'),\n    as_='geo'\n).properties(\n    width=300,\n    height=175,\n).project(\n    type='albersUsa'\n)\n\n\n\n\n\n\n\n\nimport altair as alt\nfrom vega_datasets import data\nimport geopandas as gpd\n\n# load data\ngdf_quakies = gpd.read_file(data.earthquakes.url, driver=\"GeoJSON\")\ngdf_world = gpd.read_file(data.world_110m.url, driver=\"TopoJSON\")\n\n# defintion for interactive brush\nbrush = alt.selection_interval(\n    encodings=[\"longitude\"],\n    empty=False,\n    value={\"longitude\": [-50, -110]}\n)\n\n# world disk\nsphere = alt.Chart(alt.sphere()).mark_geoshape(\n    fill=\"transparent\", stroke=\"lightgray\", strokeWidth=1\n)\n\n# countries as shapes\nworld = alt.Chart(gdf_world).mark_geoshape(\n    fill=\"lightgray\", stroke=\"white\", strokeWidth=0.1\n)\n\n# earthquakes as dots on map\nquakes = alt.Chart(gdf_quakies).transform_calculate(\n    lon=\"datum.geometry.coordinates[0]\",\n    lat=\"datum.geometry.coordinates[1]\",\n).mark_circle(opacity=0.35, tooltip=True).encode(\n    longitude=\"lon:Q\",\n    latitude=\"lat:Q\",\n    color=alt.condition(brush, alt.value(\"goldenrod\"), alt.value(\"steelblue\")),\n    size=alt.Size(\"mag:Q\").scale(type=\"pow\", range=[1, 1000], domain=[0, 7], exponent=4),\n).add_params(brush)\n\n# combine layers for the map\nleft_map = alt.layer(sphere, world, quakes).project(type=\"mercator\")\n\n# histogram of binned earthquakes\nbars = alt.Chart(gdf_quakies).mark_bar().encode(\n    x=alt.X(\"mag:Q\").bin(extent=[0,7]),\n    y=\"count(mag):Q\",\n    color=alt.value(\"steelblue\")\n)\n\n# filtered earthquakes\nbars_overlay = bars.encode(color=alt.value(\"goldenrod\")).transform_filter(brush)\n\n# combine layers for histogram\nright_bars = alt.layer(bars, bars_overlay)\n\n# vertical concatenate map and bars\nleft_map | right_bars\n\n\n\n\n\n\n\n\nimport altair as alt\nimport pandas as pd\nimport numpy as np\n\nnp.random.seed(0)\n\nn_objects = 20\nn_times = 50\n\n# Create one (x, y) pair of metadata per object\nlocations = pd.DataFrame({\n    'id': range(n_objects),\n    'x': np.random.randn(n_objects),\n    'y': np.random.randn(n_objects)\n})\n\n# Create a 50-element time-series for each object\ntimeseries = pd.DataFrame(np.random.randn(n_times, n_objects).cumsum(0),\n                          columns=locations['id'],\n                          index=pd.RangeIndex(0, n_times, name='time'))\n\n# Melt the wide-form timeseries into a long-form view\ntimeseries = timeseries.reset_index().melt('time')\n\n# Merge the (x, y) metadata into the long-form view\ntimeseries['id'] = timeseries['id'].astype(int)  # make merge not complain\ndata = pd.merge(timeseries, locations, on='id')\n\n# Data is prepared, now make a chart\n\nselector = alt.selection_point(fields=['id'])\n\nbase = alt.Chart(data).properties(\n    width=250,\n    height=250\n).add_params(selector)\n\npoints = base.mark_point(filled=True, size=200).encode(\n    x='mean(x)',\n    y='mean(y)',\n    color=alt.condition(selector, 'id:O', alt.value('lightgray'), legend=None),\n)\n\ntimeseries = base.mark_line().encode(\n    x='time',\n    y=alt.Y('value').scale(domain=(-15, 15)),\n    color=alt.Color('id:O').legend(None)\n).transform_filter(\n    selector\n)\n\npoints | timeseries\n\n\n\n\n\n\n\n\nimport altair as alt\nimport vega_datasets\n\nalt.Chart(\n    vega_datasets.data.barley.url,\n    title='Barley Yield comparison between 1932 and 1931'\n).mark_trail().encode(\n    alt.X('year:O').title(None),\n    alt.Y('variety:N').title('Variety'),\n    alt.Size('yield:Q')\n        .scale(range=[0, 12])\n        .legend(values=[20, 60])\n        .title('Barley Yield (bushels/acre)'),\n    alt.Color('delta:Q')\n        .scale(domainMid=0)\n        .title('Yield Delta (%)'),\n    alt.Tooltip(['year:O', 'yield:Q']),\n    alt.Column('site:N').title('Site')\n).transform_pivot(\n    \"year\",\n    value=\"yield\",\n    groupby=[\"variety\", \"site\"]\n).transform_fold(\n    [\"1931\", \"1932\"],\n    as_=[\"year\", \"yield\"]\n).transform_calculate(\n    calculate=\"datum['1932'] - datum['1931']\",\n    as_=\"delta\"\n).configure_legend(\n    orient='bottom',\n    direction='horizontal'\n).configure_view(\n    stroke=None\n)\n\n\n\n\n\n\n\n\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.disasters.url\n\nalt.Chart(source).transform_filter(\n    alt.datum.Entity != 'All natural disasters'\n).mark_circle(\n    opacity=0.8,\n    stroke='black',\n    strokeWidth=1,\n    strokeOpacity=0.4\n).encode(\n    alt.X('Year:T')\n        .title(None)\n        .scale(domain=['1899','2018']),\n    alt.Y('Entity:N')\n        .title(None)\n        .sort(field=\"Deaths\", op=\"sum\", order='descending'),\n    alt.Size('Deaths:Q')\n        .scale(range=[0, 2500])\n        .title('Deaths')\n        .legend(clipHeight=30, format='s'),\n    alt.Color('Entity:N').legend(None),\n    tooltip=[\n        \"Entity:N\",\n        alt.Tooltip(\"Year:T\", format='%Y'),\n        alt.Tooltip(\"Deaths:Q\", format='~s')\n    ],\n).properties(\n    width=450,\n    height=320,\n    title=alt.Title(\n        text=\"Global Deaths from Natural Disasters (1900-2017)\",\n        subtitle=\"The size of the bubble represents the total death count per year, by type of disaster\",\n        anchor='start'\n    )\n).configure_axisY(\n    domain=False,\n    ticks=False,\n    offset=10\n).configure_axisX(\n    grid=False,\n).configure_view(\n    stroke=None\n)\n\n\n\n\n\n\n\n\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.seattle_weather()\n\ncolor = alt.Color('weather:N').scale(\n    domain=['sun', 'fog', 'drizzle', 'rain', 'snow'],\n    range=['#e7ba52', '#a7a7a7', '#aec7e8', '#1f77b4', '#9467bd']\n)\n\n# We create two selections:\n# - a brush that is active on the top panel\n# - a multi-click that is active on the bottom panel\nbrush = alt.selection_interval(encodings=['x'])\nclick = alt.selection_point(encodings=['color'])\n\n# Top panel is scatter plot of temperature vs time\npoints = alt.Chart().mark_point().encode(\n    alt.X('monthdate(date):T').title('Date'),\n    alt.Y('temp_max:Q')\n        .title('Maximum Daily Temperature (C)')\n        .scale(domain=[-5, 40]),\n    alt.Size('precipitation:Q').scale(range=[5, 200]),\n    color=alt.condition(brush, color, alt.value('lightgray')),\n).properties(\n    width=550,\n    height=300\n).add_params(\n    brush\n).transform_filter(\n    click\n)\n\n# Bottom panel is a bar chart of weather type\nbars = alt.Chart().mark_bar().encode(\n    x='count()',\n    y='weather:N',\n    color=alt.condition(click, color, alt.value('lightgray')),\n).transform_filter(\n    brush\n).properties(\n    width=550,\n).add_params(\n    click\n)\n\nalt.vconcat(\n    points,\n    bars,\n    data=source,\n    title=\"Seattle Weather: 2012-2015\"\n)\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "pivottablesjs.html",
    "href": "pivottablesjs.html",
    "title": "Pivot Tables js",
    "section": "",
    "text": "import pandas as pd\nfrom pivottablejs import pivot_ui\nimport ipypivot as pt\n\ndf = pd.read_csv('Data/salaries.csv')\ndf.head()\n\n\n\n\n\n\n\n\ncompany\njob\ndegree\nsalary_more_then_100k\n\n\n\n\n0\ngoogle\nsales executive\nbachelors\n0\n\n\n1\ngoogle\nsales executive\nmasters\n0\n\n\n2\ngoogle\nbusiness manager\nbachelors\n1\n\n\n3\ngoogle\nbusiness manager\nmasters\n1\n\n\n4\ngoogle\ncomputer programmer\nbachelors\n0\n\n\n\n\n\n\n\n\npivot_ui(df)\n\n\n\n        \n        \n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MLtools",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "MLtools",
    "section": "Install",
    "text": "Install\npip install MLtools"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "MLtools",
    "section": "How to use",
    "text": "How to use\nFill me in please! Don’t forget code examples:\n\n1+1\n\n2\n\n\nTo do: - pandas - matplot - numpy - tensor - ploty"
  }
]