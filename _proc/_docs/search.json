[
  {
    "objectID": "scipy.html",
    "href": "scipy.html",
    "title": "Scipy",
    "section": "",
    "text": "Back to top"
  },
  {
    "objectID": "ipywidget.html",
    "href": "ipywidget.html",
    "title": "Ipywidget",
    "section": "",
    "text": "!pip list | grep ipywidget\n\nipywidgets                    8.0.4\nimport ipywidgets as widgets\nfrom ipywidgets import IntSlider\nfrom ipywidgets.embed import embed_minimal_html\n\nslider = IntSlider(value=40)\nembed_minimal_html('export.html', views=[slider], title='Widgets export')\nfrom IPython.display import IFrame\n\n# Specify the path to your HTML file\nhtml_file_path = 'export.html'\n\n# Display the HTML file in the notebook\nIFrame(src=html_file_path, width='100%', height=600)"
  },
  {
    "objectID": "ipywidget.html#numeric-widgets",
    "href": "ipywidget.html#numeric-widgets",
    "title": "Ipywidget",
    "section": "Numeric widgets",
    "text": "Numeric widgets\nThere are many widgets distributed with ipywidgets that are designed to display numeric values. Widgets exist for displaying integers and floats, both bounded and unbounded. The integer widgets share a similar naming scheme to their floating point counterparts. By replacing Float with Int in the widget name, you can find the Integer equivalent.\n\nIntSlider\n\nThe slider is displayed with a specified, initial value. Lower and upper bounds are defined by min and max, and the value can be incremented according to the step parameter.\nThe slider’s label is defined by description parameter\nThe slider’s orientation is either ‘horizontal’ (default) or ‘vertical’\nreadout displays the current value of the slider next to it. The options are True (default) or False\n\nreadout_format specifies the format function used to represent slider value. The default is ‘.2f’\n\n\n\nwidgets.IntSlider(\n    value=7,\n    min=0,\n    max=10,\n    step=1,\n    description='Test:',\n    disabled=False,\n    continuous_update=False,\n    orientation='horizontal',\n    readout=True,\n    readout_format='d'\n)\n\n\n\n\n\n\nFloatSlider\n\nwidgets.FloatSlider(\n    value=7.5,\n    min=0,\n    max=10.0,\n    step=0.1,\n    description='Test:',\n    disabled=False,\n    continuous_update=False,\n    orientation='horizontal',\n    readout=True,\n    readout_format='.1f',\n)\n\n\n\n\nAn example of sliders displayed vertically.\n\nwidgets.FloatSlider(\n    value=7.5,\n    min=0,\n    max=10.0,\n    step=0.1,\n    description='Test:',\n    disabled=False,\n    continuous_update=False,\n    orientation='vertical',\n    readout=True,\n    readout_format='.1f',\n)\n\n\n\n\n\n\nFloatLogSlider\nThe FloatLogSlider has a log scale, which makes it easy to have a slider that covers a wide range of positive magnitudes. The min and max refer to the minimum and maximum exponents of the base, and the value refers to the actual value of the slider.\n\nwidgets.FloatLogSlider(\n    value=10,\n    base=10,\n    min=-10, # max exponent of base\n    max=10, # min exponent of base\n    step=0.2, # exponent step\n    description='Log Slider'\n)\n\n\n\n\n\n\nIntRangeSlider\n\nwidgets.IntRangeSlider(\n    value=[5, 7],\n    min=0,\n    max=10,\n    step=1,\n    description='Test:',\n    disabled=False,\n    continuous_update=False,\n    orientation='horizontal',\n    readout=True,\n    readout_format='d',\n)\n\n\n\n\n\n\nFloatRangeSlider\n\nwidgets.FloatRangeSlider(\n    value=[5, 7.5],\n    min=0,\n    max=10.0,\n    step=0.1,\n    description='Test:',\n    disabled=False,\n    continuous_update=False,\n    orientation='horizontal',\n    readout=True,\n    readout_format='.1f',\n)\n\n\n\n\n\n\nIntProgress\n\nwidgets.IntProgress(\n    value=7,\n    min=0,\n    max=10,\n    description='Loading:',\n    bar_style='', # 'success', 'info', 'warning', 'danger' or ''\n    style={'bar_color': 'maroon'},\n    orientation='horizontal'\n)\n\n\n\n\n\n\nFloatProgress\n\nwidgets.FloatProgress(\n    value=7.5,\n    min=0,\n    max=10.0,\n    description='Loading:',\n    bar_style='info',\n    style={'bar_color': '#ffff00'},\n    orientation='horizontal'\n)\n\n\n\n\nThe numerical text boxes that impose some limit on the data (range, integer-only) impose that restriction when the user presses enter.\n\n\nBoundedIntText\n\nwidgets.BoundedIntText(\n    value=7,\n    min=0,\n    max=10,\n    step=1,\n    description='Text:',\n    disabled=False\n)\n\n\n\n\n\n\nBoundedFloatText\n\nwidgets.BoundedFloatText(\n    value=7.5,\n    min=0,\n    max=10.0,\n    step=0.1,\n    description='Text:',\n    disabled=False\n)\n\n\n\n\n\n\nIntText\n\nwidgets.IntText(\n    value=7,\n    description='Any:',\n    disabled=False\n)\n\n\n\n\n\n\nFloatText\n\nwidgets.FloatText(\n    value=7.5,\n    description='Any:',\n    disabled=False\n)"
  },
  {
    "objectID": "ipywidget.html#boolean-widgets",
    "href": "ipywidget.html#boolean-widgets",
    "title": "Ipywidget",
    "section": "Boolean widgets",
    "text": "Boolean widgets\nThere are three widgets that are designed to display a boolean value.\n\nToggleButton\n\nwidgets.ToggleButton(\n    value=False,\n    description='Click me',\n    disabled=False,\n    button_style='', # 'success', 'info', 'warning', 'danger' or ''\n    tooltip='Description',\n    icon='check' # (FontAwesome names without the `fa-` prefix)\n)\n\n\n\n\n\n\nCheckbox\n\nvalue specifies the value of the checkbox\nindent parameter places an indented checkbox, aligned with other controls. Options are True (default) or False\n\n\nwidgets.Checkbox(\n    value=False,\n    description='Check me',\n    disabled=False,\n    indent=False\n)\n\n\n\n\n\n\nValid\nThe valid widget provides a read-only indicator.\n\nwidgets.Valid(\n    value=False,\n    description='Valid!',\n)"
  },
  {
    "objectID": "ipywidget.html#selection-widgets",
    "href": "ipywidget.html#selection-widgets",
    "title": "Ipywidget",
    "section": "Selection widgets",
    "text": "Selection widgets\nThere are several widgets that can be used to display single selection lists, and two that can be used to select multiple values. All inherit from the same base class. You can specify the enumeration of selectable options by passing a list (options are either (label, value) pairs, or simply values for which the labels are derived by calling str).\n\nDropdown\n\nwidgets.Dropdown(\n    options=['1', '2', '3'],\n    value='2',\n    description='Number:',\n    disabled=False,\n)\n\n\n\n\nThe following is also valid, displaying the words 'One', 'Two', 'Three' as the dropdown choices but returning the values 1, 2, 3.\n\nwidgets.Dropdown(\n    options=[('One', 1), ('Two', 2), ('Three', 3)],\n    value=2,\n    description='Number:',\n)\n\n\n\n\n\n\nRadioButtons\n\nwidgets.RadioButtons(\n    options=['pepperoni', 'pineapple', 'anchovies'],\n#    value='pineapple', # Defaults to 'pineapple'\n#    layout={'width': 'max-content'}, # If the items' names are long\n    description='Pizza topping:',\n    disabled=False\n)\n\n\n\n\n\nWith dynamic layout and very long labels\n\nwidgets.Box(\n    [\n        widgets.Label(value='Pizza topping with a very long label:'), \n        widgets.RadioButtons(\n            options=[\n                'pepperoni', \n                'pineapple', \n                'anchovies', \n                'and the long name that will fit fine and the long name that will fit fine and the long name that will fit fine '\n            ],\n            layout={'width': 'max-content'}\n        )\n    ]\n)\n\n\n\n\n\n\n\nSelect\n\nwidgets.Select(\n    options=['Linux', 'Windows', 'macOS'],\n    value='macOS',\n    # rows=10,\n    description='OS:',\n    disabled=False\n)\n\n\n\n\n\n\nSelectionSlider\n\nwidgets.SelectionSlider(\n    options=['scrambled', 'sunny side up', 'poached', 'over easy'],\n    value='sunny side up',\n    description='I like my eggs ...',\n    disabled=False,\n    continuous_update=False,\n    orientation='horizontal',\n    readout=True\n)\n\n\n\n\n\n\nSelectionRangeSlider\nThe value, index, and label keys are 2-tuples of the min and max values selected. The options must be nonempty.\n\nimport datetime\ndates = [datetime.date(2015, i, 1) for i in range(1, 13)]\noptions = [(i.strftime('%b'), i) for i in dates]\nwidgets.SelectionRangeSlider(\n    options=options,\n    index=(0, 11),\n    description='Months (2015)',\n    disabled=False\n)\n\n\n\n\n\n\nToggleButtons\n\nwidgets.ToggleButtons(\n    options=['Slow', 'Regular', 'Fast'],\n    description='Speed:',\n    disabled=False,\n    button_style='', # 'success', 'info', 'warning', 'danger' or ''\n    tooltips=['Description of slow', 'Description of regular', 'Description of fast'],\n#     icons=['check'] * 3\n)\n\n\n\n\n\n\nSelectMultiple\nMultiple values can be selected with shift and/or ctrl (or command) pressed and mouse clicks or arrow keys.\n\nwidgets.SelectMultiple(\n    options=['Apples', 'Oranges', 'Pears'],\n    value=['Oranges'],\n    #rows=10,\n    description='Fruits',\n    disabled=False\n)"
  },
  {
    "objectID": "ipywidget.html#string-widgets",
    "href": "ipywidget.html#string-widgets",
    "title": "Ipywidget",
    "section": "String widgets",
    "text": "String widgets\nThere are several widgets that can be used to display a string value. The Text, Textarea, and Combobox widgets accept input. The HTML and HTMLMath widgets display a string as HTML (HTMLMath also renders math). The Label widget can be used to construct a custom control label.\n\nText\n\nwidgets.Text(\n    value='Hello World',\n    placeholder='Type something',\n    description='String:',\n    disabled=False   \n)\n\n\n\n\n\n\nTextarea\n\nwidgets.Textarea(\n    value='Hello World',\n    placeholder='Type something',\n    description='String:',\n    disabled=False\n)\n\n\n\n\n\n\nCombobox\n\nwidgets.Combobox(\n    # value='John',\n    placeholder='Choose Someone',\n    options=['Paul', 'John', 'George', 'Ringo'],\n    description='Combobox:',\n    ensure_option=True,\n    disabled=False\n)\n\n\n\n\n\n\nPassword\nThe Password widget hides user input on the screen. This widget is not a secure way to collect sensitive information because:\n\nThe contents of the Password widget are transmitted unencrypted.\nIf the widget state is saved in the notebook the contents of the Password widget is stored as plain text.\n\n\nwidgets.Password(\n    value='password',\n    placeholder='Enter password',\n    description='Password:',\n    disabled=False\n)\n\n\n\n\n\n\nLabel\nThe Label widget is useful if you need to build a custom description next to a control using similar styling to the built-in control descriptions.\n\nwidgets.HBox([widgets.Label(value=\"The $m$ in $E=mc^2$:\"), widgets.FloatSlider()])\n\n\n\n\n\n\nHTML\n\nwidgets.HTML(\n    value=\"Hello &lt;b&gt;World&lt;/b&gt;\",\n    placeholder='Some HTML',\n    description='Some HTML',\n)\n\n\n\n\n\n\nHTML Math\n\nwidgets.HTMLMath(\n    value=r\"Some math and &lt;i&gt;HTML&lt;/i&gt;: \\(x^2\\) and $$\\frac{x+1}{x-1}$$\",\n    placeholder='Some HTML',\n    description='Some HTML',\n)"
  },
  {
    "objectID": "ipywidget.html#image",
    "href": "ipywidget.html#image",
    "title": "Ipywidget",
    "section": "Image",
    "text": "Image\n\nfile = open(\"bird.jpg\", \"rb\")\nimage = file.read()\nwidgets.Image(\n    value=image,\n    format='png',\n    width=300,\n    height=400,\n)"
  },
  {
    "objectID": "ipywidget.html#button",
    "href": "ipywidget.html#button",
    "title": "Ipywidget",
    "section": "Button",
    "text": "Button\n\nbutton = widgets.Button(\n    description='Click me',\n    disabled=False,\n    button_style='', # 'success', 'info', 'warning', 'danger' or ''\n    tooltip='Click me',\n    icon='check' # (FontAwesome names without the `fa-` prefix)\n)\nbutton\n\n\n\n\nThe icon attribute can be used to define an icon; see the fontawesome page for available icons. A callback function foo can be registered using button.on_click(foo). The function foo will be called when the button is clicked with the button instance as its single argument."
  },
  {
    "objectID": "ipywidget.html#output",
    "href": "ipywidget.html#output",
    "title": "Ipywidget",
    "section": "Output",
    "text": "Output\nThe Output widget can capture and display stdout, stderr and rich output generated by IPython. For detailed documentation, see the output widget examples."
  },
  {
    "objectID": "ipywidget.html#play-animation-widget",
    "href": "ipywidget.html#play-animation-widget",
    "title": "Ipywidget",
    "section": "Play (Animation) widget",
    "text": "Play (Animation) widget\nThe Play widget is useful to perform animations by iterating on a sequence of integers with a certain speed. The value of the slider below is linked to the player.\n\nplay = widgets.Play(\n    value=50,\n    min=0,\n    max=100,\n    step=1,\n    interval=500,\n    description=\"Press play\",\n    disabled=False\n)\nslider = widgets.IntSlider()\nwidgets.jslink((play, 'value'), (slider, 'value'))\nwidgets.HBox([play, slider])"
  },
  {
    "objectID": "ipywidget.html#tag-widgets",
    "href": "ipywidget.html#tag-widgets",
    "title": "Ipywidget",
    "section": "Tag widgets",
    "text": "Tag widgets\n\nTagsInput\nThe TagsInput widget is useful for selecting/creating a list of tags. You can drag and drop tags to reorder them, limit them to a set of allowed values, or even prevent making duplicate tags.\n\ntags = widgets.TagsInput(\n    value=['pizza', 'fries'],\n    allowed_tags=['pizza', 'fries', 'tomatoes', 'steak'],\n    allow_duplicates=False\n)\ntags\n\n\n\n\n\n\nColorsInput\nThe ColorsInput widget is useful for selecting/creating a list of colors. You can drag and drop colors to reorder them, limit them to a set of allowed values, or even prevent making duplicate colors.\n\ncolor_tags = widgets.ColorsInput(\n    value=['red', '#2f6d30'],\n    # allowed_tags=['red', 'blue', 'green'],\n    # allow_duplicates=False\n)\ncolor_tags\n\n\n\n\n\n\nFloat and Integer Input widgets\nThe FloatInputs and IntsInput widgets enable creating a list of float or integer numbers.\n\nfloatsinput = widgets.FloatsInput(\n    value=[1.3, 4.56, 78.90],\n    tag_style='info',\n    format = '.2f'\n)\nfloatsinput\n\n\n\n\n\nintsinput = widgets.IntsInput(\n    value=[1, 4, 3243],\n    min=0,\n    max=1000000,\n    format='$,d'\n)\nintsinput"
  },
  {
    "objectID": "ipywidget.html#date-picker",
    "href": "ipywidget.html#date-picker",
    "title": "Ipywidget",
    "section": "Date picker",
    "text": "Date picker\nFor a list of browsers that support the date picker widget, see the MDN article for the HTML date input field.\n\nwidgets.DatePicker(\n    description='Pick a Date',\n    disabled=False\n)"
  },
  {
    "objectID": "ipywidget.html#time-picker",
    "href": "ipywidget.html#time-picker",
    "title": "Ipywidget",
    "section": "Time picker",
    "text": "Time picker\nFor a list of browsers that support the time picker widget, see the MDN article for the HTML time input field.\n\nwidgets.TimePicker(\n    description='Pick a Time',\n    disabled=False\n)"
  },
  {
    "objectID": "ipywidget.html#datetime-picker",
    "href": "ipywidget.html#datetime-picker",
    "title": "Ipywidget",
    "section": "Datetime picker",
    "text": "Datetime picker\nFor a list of browsers that support the datetime picker widget, see the MDN article for the HTML datetime-local input field. For the browsers that do not support the datetime-local input, we try to fall back on displaying separate date and time inputs.\n\nTime zones\nThere are two points worth to note with regards to timezones for datetimes: - The browser always picks datetimes using its timezone. - The kernel always gets the datetimes in the default system timezone of the kernel (see https://docs.python.org/3/library/datetime.html#datetime.datetime.astimezone with None as the argument).\nThis means that if the kernel and browser have different timezones, the default string serialization of the timezones might differ, but they will still represent the same point in time.\n\nwidgets.DatetimePicker(\n    description='Pick a Time',\n    disabled=False\n)"
  },
  {
    "objectID": "ipywidget.html#naive-picker",
    "href": "ipywidget.html#naive-picker",
    "title": "Ipywidget",
    "section": "Naive picker",
    "text": "Naive picker\nIn some cases you might want to be able to pick naive datetime objects, i.e. timezone-unaware datetimes. To quote the Python 3 docs:\n\nNaive objects are easy to understand and to work with, at the cost of ignoring some aspects of reality.\n\nThis is useful if you need to compare the picked datetime to naive datetime objects, as Python will otherwise complain!\n\nwidgets.NaiveDatetimePicker(description='Pick a Time')"
  },
  {
    "objectID": "ipywidget.html#color-picker",
    "href": "ipywidget.html#color-picker",
    "title": "Ipywidget",
    "section": "Color picker",
    "text": "Color picker\n\nwidgets.ColorPicker(\n    concise=False,\n    description='Pick a color',\n    value='blue',\n    disabled=False\n)"
  },
  {
    "objectID": "ipywidget.html#file-upload",
    "href": "ipywidget.html#file-upload",
    "title": "Ipywidget",
    "section": "File Upload",
    "text": "File Upload\nThe FileUpload allows to upload any type of file(s) into memory in the kernel.\n\nwidgets.FileUpload(\n    accept='',  # Accepted file extension e.g. '.txt', '.pdf', 'image/*', 'image/*,.pdf'\n    multiple=False  # True to accept multiple files upload else False\n)\n\n\n\n\nThe upload widget exposes a value attribute that contains the files uploaded. The value attribute is a tuple with a dictionary for each uploaded file. For instance:\nuploader = widgets.FileUpload()\ndisplay(uploader)\n\n# upload something...\n\n# once a file is uploaded, use the `.value` attribute to retrieve the content:\nuploader.value\n#=&gt; (\n#=&gt;   {\n#=&gt;     'name': 'example.txt',\n#=&gt;     'type': 'text/plain',\n#=&gt;     'size': 36,\n#=&gt;     'last_modified': datetime.datetime(2020, 1, 9, 15, 58, 43, 321000, tzinfo=datetime.timezone.utc), \n#=&gt;     'content': &lt;memory at 0x10c1b37c8&gt;\n#=&gt;   },\n#=&gt; )\nEntries in the dictionary can be accessed either as items, as one would any dictionary, or as attributes:\nuploaded_file = uploader.value[0]\nuploaded_file[\"size\"]\n#=&gt; 36\nuploaded_file.size\n#=&gt; 36\nThe contents of the file uploaded are in the value of the content key. They are a memory view:\nuploaded_file.content\n#=&gt; &lt;memory at 0x10c1b37c8&gt;\nYou can extract the content to bytes:\nuploaded_file.content.tobytes()\n#=&gt; b'This is the content of example.txt.\\n'\nIf the file is a text file, you can get the contents as a string by decoding it:\nimport codecs\ncodecs.decode(uploaded_file.content, encoding=\"utf-8\")\n#=&gt; 'This is the content of example.txt.\\n'\nYou can save the uploaded file to the filesystem from the kernel:\nwith open(\"./saved-output.txt\", \"wb\") as fp:\n    fp.write(uploaded_file.content)\nTo convert the uploaded file into a Pandas dataframe, you can use a BytesIO object:\nimport io\nimport pandas as pd\npd.read_csv(io.BytesIO(uploaded_file.content))\nIf the uploaded file is an image, you can visualize it with an image widget:\nwidgets.Image(value=uploaded_file.content.tobytes())\n\nChanges in ipywidgets 8:\nThe FileUpload changed significantly in ipywidgets 8:\n\nThe .value traitlet is now a list of dictionaries, rather than a dictionary mapping the uploaded name to the content. To retrieve the original form, use {f[\"name\"]: f.content.tobytes() for f in uploader.value}.\nThe .data traitlet has been removed. To retrieve it, use [f.content.tobytes() for f in uploader.value].\nThe .metadata traitlet has been removed. To retrieve it, use [{k: v for k, v in f.items() if k != \"content\"} for f in w.value].\n\n\n\nWarning: When using the FileUpload Widget, uploaded file content might be saved in the notebook if widget state is saved."
  },
  {
    "objectID": "ipywidget.html#controller",
    "href": "ipywidget.html#controller",
    "title": "Ipywidget",
    "section": "Controller",
    "text": "Controller\nThe Controller allows a game controller to be used as an input device.\n\nwidgets.Controller(\n    index=0,\n)"
  },
  {
    "objectID": "ipywidget.html#containerlayout-widgets",
    "href": "ipywidget.html#containerlayout-widgets",
    "title": "Ipywidget",
    "section": "Container/Layout widgets",
    "text": "Container/Layout widgets\nThese widgets are used to hold other widgets, called children. Each has a children property that may be set either when the widget is created or later.\n\nBox\n\nitems = [widgets.Label(str(i)) for i in range(4)]\nwidgets.Box(items)\n\n\n\n\n\n\nHBox\n\nitems = [widgets.Label(str(i)) for i in range(4)]\nwidgets.HBox(items)\n\n\n\n\n\n\nVBox\n\nitems = [widgets.Label(str(i)) for i in range(4)]\nleft_box = widgets.VBox([items[0], items[1]])\nright_box = widgets.VBox([items[2], items[3]])\nwidgets.HBox([left_box, right_box])\n\n\n\n\n\n\nGridBox\nThis box uses the HTML Grid specification to lay out its children in two dimensional grid. The example below lays out the 8 items inside in 3 columns and as many rows as needed to accommodate the items.\n\nitems = [widgets.Label(str(i)) for i in range(8)]\nwidgets.GridBox(items, layout=widgets.Layout(grid_template_columns=\"repeat(3, 100px)\"))\n\n\n\n\n\n\nAccordion\n\naccordion = widgets.Accordion(children=[widgets.IntSlider(), widgets.Text()], titles=('Slider', 'Text'))\naccordion\n\n\n\n\n\n\nTabs\nIn this example the children are set after the tab is created. Titles for the tabs are set in the same way they are for Accordion.\n\ntab_contents = ['P0', 'P1', 'P2', 'P3', 'P4']\nchildren = [widgets.Text(description=name) for name in tab_contents]\ntab = widgets.Tab()\ntab.children = children\ntab.titles = [str(i) for i in range(len(children))]\ntab\n\n\n\n\n\n\nStack\nThe Stack widget can have multiple children widgets as for Tab and Accordion, but only shows one at a time depending on the value of selected_index:\n\nbutton = widgets.Button(description='Click here')\nslider = widgets.IntSlider()\nstack = widgets.Stack([button, slider], selected_index=0)\nstack  # will show only the button\n\n\n\n\nThis can be used in combination with another selection-based widget to show different widgets depending on the selection:\n\ndropdown = widgets.Dropdown(options=['button', 'slider'])\nwidgets.jslink((dropdown, 'index'), (stack, 'selected_index'))\nwidgets.VBox([dropdown, stack])\n\n\n\n\n\n\nAccordion, Tab, and Stack use selected_index, not value\nUnlike the rest of the widgets discussed earlier, the container widgets Accordion and Tab update their selected_index attribute when the user changes which accordion or tab is selected. That means that you can both see what the user is doing and programmatically set what the user sees by setting the value of selected_index.\nSetting selected_index = None closes all of the accordions or deselects all tabs.\nIn the cells below try displaying or setting the selected_index of the tab and/or accordion.\n\ntab.selected_index = 3\n\n\naccordion.selected_index = None\n\n\n\nNesting tabs and accordions\nTabs and accordions can be nested as deeply as you want. If you have a few minutes, try nesting a few accordions or putting an accordion inside a tab or a tab inside an accordion.\nThe example below makes a couple of tabs with an accordion children in one of them\n\ntab_nest = widgets.Tab()\ntab_nest.children = [accordion, accordion]\ntab_nest.titles = ('An accordion', 'Copy of the accordion')\ntab_nest"
  },
  {
    "objectID": "pytube.html",
    "href": "pytube.html",
    "title": "Pytube",
    "section": "",
    "text": "!pip list | grep pytube\n\npytube                        15.0.0\n\n\n\nfrom pytube import YouTube\nyt = YouTube('https://www.youtube.com/watch?v=dQw4w9WgXcQ')\n\n\nyt.title\n\n'Never Gonna Give You Up'\n\n\n\nyt.thumbnail_url\n\n'https://i.ytimg.com/vi/dQw4w9WgXcQ/hq720.jpg?sqp=-oaymwEXCNUGEOADIAQqCwjVARCqCBh4INgESFo&rs=AOn4CLBX-HcaMSEAucUr5J0qD5nEyiPAoQ'\n\n\n\nhigh_yt = yt.streams.get_highest_resolution()\n\n\nhigh_yt.download(output_path = 'Data')\n\n'/home/ben/BENEDICT_Only/Benedict_Projects/Benedict_ML/MLtools/nbs/Data/Never Gonna Give You Up.mp4'\n\n\n\nfor streams in yt.streams:\n    print(streams)\n\n&lt;Stream: itag=\"17\" mime_type=\"video/3gpp\" res=\"144p\" fps=\"6fps\" vcodec=\"mp4v.20.3\" acodec=\"mp4a.40.2\" progressive=\"True\" type=\"video\"&gt;\n&lt;Stream: itag=\"18\" mime_type=\"video/mp4\" res=\"360p\" fps=\"25fps\" vcodec=\"avc1.42001E\" acodec=\"mp4a.40.2\" progressive=\"True\" type=\"video\"&gt;\n&lt;Stream: itag=\"22\" mime_type=\"video/mp4\" res=\"720p\" fps=\"25fps\" vcodec=\"avc1.64001F\" acodec=\"mp4a.40.2\" progressive=\"True\" type=\"video\"&gt;\n&lt;Stream: itag=\"137\" mime_type=\"video/mp4\" res=\"1080p\" fps=\"25fps\" vcodec=\"avc1.640028\" progressive=\"False\" type=\"video\"&gt;\n&lt;Stream: itag=\"248\" mime_type=\"video/webm\" res=\"1080p\" fps=\"25fps\" vcodec=\"vp9\" progressive=\"False\" type=\"video\"&gt;\n&lt;Stream: itag=\"136\" mime_type=\"video/mp4\" res=\"720p\" fps=\"25fps\" vcodec=\"avc1.4d401f\" progressive=\"False\" type=\"video\"&gt;\n&lt;Stream: itag=\"247\" mime_type=\"video/webm\" res=\"720p\" fps=\"25fps\" vcodec=\"vp9\" progressive=\"False\" type=\"video\"&gt;\n&lt;Stream: itag=\"135\" mime_type=\"video/mp4\" res=\"480p\" fps=\"25fps\" vcodec=\"avc1.4d401e\" progressive=\"False\" type=\"video\"&gt;\n&lt;Stream: itag=\"244\" mime_type=\"video/webm\" res=\"480p\" fps=\"25fps\" vcodec=\"vp9\" progressive=\"False\" type=\"video\"&gt;\n&lt;Stream: itag=\"134\" mime_type=\"video/mp4\" res=\"360p\" fps=\"25fps\" vcodec=\"avc1.4d401e\" progressive=\"False\" type=\"video\"&gt;\n&lt;Stream: itag=\"243\" mime_type=\"video/webm\" res=\"360p\" fps=\"25fps\" vcodec=\"vp9\" progressive=\"False\" type=\"video\"&gt;\n&lt;Stream: itag=\"133\" mime_type=\"video/mp4\" res=\"240p\" fps=\"25fps\" vcodec=\"avc1.4d4015\" progressive=\"False\" type=\"video\"&gt;\n&lt;Stream: itag=\"242\" mime_type=\"video/webm\" res=\"240p\" fps=\"25fps\" vcodec=\"vp9\" progressive=\"False\" type=\"video\"&gt;\n&lt;Stream: itag=\"160\" mime_type=\"video/mp4\" res=\"144p\" fps=\"25fps\" vcodec=\"avc1.4d400c\" progressive=\"False\" type=\"video\"&gt;\n&lt;Stream: itag=\"278\" mime_type=\"video/webm\" res=\"144p\" fps=\"25fps\" vcodec=\"vp9\" progressive=\"False\" type=\"video\"&gt;\n&lt;Stream: itag=\"139\" mime_type=\"audio/mp4\" abr=\"48kbps\" acodec=\"mp4a.40.5\" progressive=\"False\" type=\"audio\"&gt;\n&lt;Stream: itag=\"140\" mime_type=\"audio/mp4\" abr=\"128kbps\" acodec=\"mp4a.40.2\" progressive=\"False\" type=\"audio\"&gt;\n&lt;Stream: itag=\"249\" mime_type=\"audio/webm\" abr=\"50kbps\" acodec=\"opus\" progressive=\"False\" type=\"audio\"&gt;\n&lt;Stream: itag=\"250\" mime_type=\"audio/webm\" abr=\"70kbps\" acodec=\"opus\" progressive=\"False\" type=\"audio\"&gt;\n&lt;Stream: itag=\"251\" mime_type=\"audio/webm\" abr=\"160kbps\" acodec=\"opus\" progressive=\"False\" type=\"audio\"&gt;\n\n\n\nyt.streams\\\n.filter(progressive=True, file_extension='mp4')\\\n.order_by('resolution')\\\n.desc().first().download(output_path = 'Data')\n\n'/home/ben/BENEDICT_Only/Benedict_Projects/Benedict_ML/MLtools/nbs/Data/Never Gonna Give You Up.mp4'\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "tqdm.html",
    "href": "tqdm.html",
    "title": "TQDM",
    "section": "",
    "text": "!pip list | grep tqdm\n\ntqdm                          4.66.1\n\n\n\nfrom tqdm import tqdm\nfor i in tqdm(range(10000)):\n\nSyntaxError: incomplete input (3811168149.py, line 2)\n\n\n\nfrom tqdm import tqdm       # &lt;-- yes\nfrom time import sleep\nfor i in tqdm(range(100)):  # &lt;-- magic\n    sleep(0.01)\n\n100%|█████████████████████████████████████████████████████████████████████████████████| 100/100 [00:01&lt;00:00, 95.46it/s]\n\n\n\nfrom tqdm import trange\nfrom time import sleep\nfor i in trange(100, desc=\"hello\", unit=\"epoch\"):\n    sleep(0.01)\n\nhello: 100%|███████████████████████████████████████████████████████████████████████| 100/100 [00:01&lt;00:00, 95.92epoch/s]\n\n\n\nwith tqdm(total=100) as pbar:\n    for i in range(10):\n        sleep(0.1)\n        pbar.update(10)\n\n100%|█████████████████████████████████████████████████████████████████████████████████| 100/100 [00:01&lt;00:00, 98.77it/s]\n\n\n\npbar = tqdm(total=100)\nfor i in range(10):\n    sleep(0.1)\n    pbar.update(10)\npbar.close()\n\n100%|█████████████████████████████████████████████████████████████████████████████████| 100/100 [00:01&lt;00:00, 98.94it/s]\n\n\n\nfrom tqdm import tqdm\ntqdm?\n\n\nInit signature: tqdm(*_, **__)\nDocstring:     \nDecorate an iterable object, returning an iterator which acts exactly\nlike the original iterable, but prints a dynamically updating\nprogressbar every time a value is requested.\nParameters\n----------\niterable  : iterable, optional\n    Iterable to decorate with a progressbar.\n    Leave blank to manually manage the updates.\ndesc  : str, optional\n    Prefix for the progressbar.\ntotal  : int or float, optional\n    The number of expected iterations. If unspecified,\n    len(iterable) is used if possible. If float(\"inf\") or as a last\n    resort, only basic progress statistics are displayed\n    (no ETA, no progressbar).\n    If `gui` is True and this parameter needs subsequent updating,\n    specify an initial arbitrary large positive number,\n    e.g. 9e9.\nleave  : bool, optional\n    If [default: True], keeps all traces of the progressbar\n    upon termination of iteration.\n    If `None`, will leave only if `position` is `0`.\nfile  : `io.TextIOWrapper` or `io.StringIO`, optional\n    Specifies where to output the progress messages\n    (default: sys.stderr). Uses `file.write(str)` and `file.flush()`\n    methods.  For encoding, see `write_bytes`.\nncols  : int, optional\n    The width of the entire output message. If specified,\n    dynamically resizes the progressbar to stay within this bound.\n    If unspecified, attempts to use environment width. The\n    fallback is a meter width of 10 and no limit for the counter and\n    statistics. If 0, will not print any meter (only stats).\nmininterval  : float, optional\n    Minimum progress display update interval [default: 0.1] seconds.\nmaxinterval  : float, optional\n    Maximum progress display update interval [default: 10] seconds.\n    Automatically adjusts `miniters` to correspond to `mininterval`\n    after long display update lag. Only works if `dynamic_miniters`\n    or monitor thread is enabled.\nminiters  : int or float, optional\n    Minimum progress display update interval, in iterations.\n    If 0 and `dynamic_miniters`, will automatically adjust to equal\n    `mininterval` (more CPU efficient, good for tight loops).\n    If &gt; 0, will skip display of specified number of iterations.\n    Tweak this and `mininterval` to get very efficient loops.\n    If your progress is erratic with both fast and slow iterations\n    (network, skipping items, etc) you should set miniters=1.\nascii  : bool or str, optional\n    If unspecified or False, use unicode (smooth blocks) to fill\n    the meter. The fallback is to use ASCII characters \" 123456789#\".\ndisable  : bool, optional\n    Whether to disable the entire progressbar wrapper\n    [default: False]. If set to None, disable on non-TTY.\nunit  : str, optional\n    String that will be used to define the unit of each iteration\n    [default: it].\nunit_scale  : bool or int or float, optional\n    If 1 or True, the number of iterations will be reduced/scaled\n    automatically and a metric prefix following the\n    International System of Units standard will be added\n    (kilo, mega, etc.) [default: False]. If any other non-zero\n    number, will scale `total` and `n`.\ndynamic_ncols  : bool, optional\n    If set, constantly alters `ncols` and `nrows` to the\n    environment (allowing for window resizes) [default: False].\nsmoothing  : float, optional\n    Exponential moving average smoothing factor for speed estimates\n    (ignored in GUI mode). Ranges from 0 (average speed) to 1\n    (current/instantaneous speed) [default: 0.3].\nbar_format  : str, optional\n    Specify a custom bar string formatting. May impact performance.\n    [default: '{l_bar}{bar}{r_bar}'], where\n    l_bar='{desc}: {percentage:3.0f}%|' and\n    r_bar='| {n_fmt}/{total_fmt} [{elapsed}&lt;{remaining}, '\n        '{rate_fmt}{postfix}]'\n    Possible vars: l_bar, bar, r_bar, n, n_fmt, total, total_fmt,\n        percentage, elapsed, elapsed_s, ncols, nrows, desc, unit,\n        rate, rate_fmt, rate_noinv, rate_noinv_fmt,\n        rate_inv, rate_inv_fmt, postfix, unit_divisor,\n        remaining, remaining_s, eta.\n    Note that a trailing \": \" is automatically removed after {desc}\n    if the latter is empty.\ninitial  : int or float, optional\n    The initial counter value. Useful when restarting a progress\n    bar [default: 0]. If using float, consider specifying `{n:.3f}`\n    or similar in `bar_format`, or specifying `unit_scale`.\nposition  : int, optional\n    Specify the line offset to print this bar (starting from 0)\n    Automatic if unspecified.\n    Useful to manage multiple bars at once (eg, from threads).\npostfix  : dict or *, optional\n    Specify additional stats to display at the end of the bar.\n    Calls `set_postfix(**postfix)` if possible (dict).\nunit_divisor  : float, optional\n    [default: 1000], ignored unless `unit_scale` is True.\nwrite_bytes  : bool, optional\n    Whether to write bytes. If (default: False) will write unicode.\nlock_args  : tuple, optional\n    Passed to `refresh` for intermediate output\n    (initialisation, iterating, and updating).\nnrows  : int, optional\n    The screen height. If specified, hides nested bars outside this\n    bound. If unspecified, attempts to use environment height.\n    The fallback is 20.\ncolour  : str, optional\n    Bar colour (e.g. 'green', '#00ff00').\ndelay  : float, optional\n    Don't display until [default: 0] seconds have elapsed.\ngui  : bool, optional\n    WARNING: internal parameter - do not use.\n    Use tqdm.gui.tqdm(...) instead. If set, will attempt to use\n    matplotlib animations for a graphical output [default: False].\nReturns\n-------\nout  : decorated iterator.\nFile:           ~/mambaforge/envs/cfast/lib/python3.11/site-packages/tqdm/std.py\nType:           type\nSubclasses:     tqdm_gui\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "matplotlib.html",
    "href": "matplotlib.html",
    "title": "Matplotlib",
    "section": "",
    "text": "Back to top"
  },
  {
    "objectID": "mito.html",
    "href": "mito.html",
    "title": "Mito",
    "section": "",
    "text": "!pip list | grep mitosheet\n\nmitosheet                     0.1.530\n\n\n\nimport mitosheet\n\n\nmitosheet.sheet(analysis_to_replay=\"id-qdjqkelpwx\")\n\n\n\n        \n    \n\n\n\nfrom mitosheet.public.v3 import *; # Analysis Name:id-qdjqkelpwx;\nimport pandas as pd\n\n# Imported salaries.csv\nsalaries = pd.read_csv(r'/home/ben/BENEDICT_Only/Benedict_Projects/Benedict_ML/ML/nbs/Data/salaries.csv')\n\n# sort the column company in ascending order\nsalaries.sort_values('company', ascending=True, inplace=True)\n\n\n\n\n Back to top"
  },
  {
    "objectID": "pivottablesjs.html",
    "href": "pivottablesjs.html",
    "title": "Pivot Tables js",
    "section": "",
    "text": "import pandas as pd\nfrom pivottablejs import pivot_ui\nimport ipypivot as pt\n\ndf = pd.read_csv('Data/salaries.csv')\ndf.head()\n\n\n\n\n\n\n\n\ncompany\njob\ndegree\nsalary_more_then_100k\n\n\n\n\n0\ngoogle\nsales executive\nbachelors\n0\n\n\n1\ngoogle\nsales executive\nmasters\n0\n\n\n2\ngoogle\nbusiness manager\nbachelors\n1\n\n\n3\ngoogle\nbusiness manager\nmasters\n1\n\n\n4\ngoogle\ncomputer programmer\nbachelors\n0\n\n\n\n\n\n\n\n\npivot_ui(df)\n\n\n\n        \n        \n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "tmux.html",
    "href": "tmux.html",
    "title": "Tmux",
    "section": "",
    "text": "tmux\ntmux new\ntmux new -s &lt;session name&gt;\n\n\n\ntmux ls\ntmux list-sessions\ntmux new -s &lt;session name&gt;\n\n\n\ntmux a\ntmux at\ntmux a -t &lt;session name&gt;\n\n\n\ntmux kill-session -t &lt;session name&gt;\n\n\n\nCtrl + b $\n\n\n\nCtrl + b d\n\n\n\nCtrl + b w\n\n\n\nCtrl + b (\n\n\n\nCtrl + b )"
  },
  {
    "objectID": "tmux.html#create-a-new-session",
    "href": "tmux.html#create-a-new-session",
    "title": "Tmux",
    "section": "",
    "text": "tmux\ntmux new\ntmux new -s &lt;session name&gt;"
  },
  {
    "objectID": "numpy.html",
    "href": "numpy.html",
    "title": "Numpy",
    "section": "",
    "text": "Back to top"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MLtools",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "MLtools",
    "section": "Install",
    "text": "Install\npip install MLtools\nTo do: - pandas - matplot - numpy - tensor - ploty/ seaborn"
  },
  {
    "objectID": "pandas.html",
    "href": "pandas.html",
    "title": "Pandas",
    "section": "",
    "text": "import pandas as pd\n\n# Create an empty DataFrame\nempty_df = pd.DataFrame()"
  },
  {
    "objectID": "pandas.html#add-column",
    "href": "pandas.html#add-column",
    "title": "Pandas",
    "section": "",
    "text": "import pandas as pd\n\n# Create an empty DataFrame\nempty_df = pd.DataFrame()"
  },
  {
    "objectID": "pandas.html#edit-column-name",
    "href": "pandas.html#edit-column-name",
    "title": "Pandas",
    "section": "Edit Column name",
    "text": "Edit Column name\ndf_plot.rename(columns={'y': 'final'}, inplace=True)"
  },
  {
    "objectID": "pandas.html#drop-column",
    "href": "pandas.html#drop-column",
    "title": "Pandas",
    "section": "Drop Column",
    "text": "Drop Column\ncv_df.drop('cutoff', axis=1, inplace=True)"
  },
  {
    "objectID": "pandas.html#plots",
    "href": "pandas.html#plots",
    "title": "Pandas",
    "section": "Plots",
    "text": "Plots\n(\n    wide_df[['y']].plot(title='Production')\n)"
  },
  {
    "objectID": "pandas.html#long-form-to-wide-form",
    "href": "pandas.html#long-form-to-wide-form",
    "title": "Pandas",
    "section": "Long form to Wide form",
    "text": "Long form to Wide form\ndef long_form(df_plot):\n    return df_plot.melt('ds', var_name='unique_id', value_name='y')"
  },
  {
    "objectID": "pandas.html#wide-form-to-long-form",
    "href": "pandas.html#wide-form-to-long-form",
    "title": "Pandas",
    "section": "Wide form to long form",
    "text": "Wide form to long form\n#|eval: false\nwide_df = result.pivot(index='_time', columns='sensor', values='_value')\n# Reset the index to make 'id' a regular column\nwide_df.reset_index(inplace=True)\n\nwide_df.columns"
  },
  {
    "objectID": "pandas.html#aggregate",
    "href": "pandas.html#aggregate",
    "title": "Pandas",
    "section": "Aggregate",
    "text": "Aggregate\n\nto do"
  },
  {
    "objectID": "pandas.html#stats",
    "href": "pandas.html#stats",
    "title": "Pandas",
    "section": "Stats",
    "text": "Stats\n\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\n# Load the dataset\nflights = (sns.load_dataset(\"flights\"))\nflights\n\n\n\n\n\n\n\n\nyear\nmonth\npassengers\n\n\n\n\n0\n1949\nJan\n112\n\n\n1\n1949\nFeb\n118\n\n\n2\n1949\nMar\n132\n\n\n3\n1949\nApr\n129\n\n\n4\n1949\nMay\n121\n\n\n...\n...\n...\n...\n\n\n139\n1960\nAug\n606\n\n\n140\n1960\nSep\n508\n\n\n141\n1960\nOct\n461\n\n\n142\n1960\nNov\n390\n\n\n143\n1960\nDec\n432\n\n\n\n\n144 rows × 3 columns\n\n\n\n\nflights.head(), flights.tail()\n\n(   year month  passengers\n 0  1949   Jan         112\n 1  1949   Feb         118\n 2  1949   Mar         132\n 3  1949   Apr         129\n 4  1949   May         121,\n      year month  passengers\n 139  1960   Aug         606\n 140  1960   Sep         508\n 141  1960   Oct         461\n 142  1960   Nov         390\n 143  1960   Dec         432)\n\n\n\nflights.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 144 entries, 0 to 143\nData columns (total 3 columns):\n #   Column      Non-Null Count  Dtype   \n---  ------      --------------  -----   \n 0   year        144 non-null    int64   \n 1   month       144 non-null    category\n 2   passengers  144 non-null    int64   \ndtypes: category(1), int64(2)\nmemory usage: 2.9 KB\n\n\n\nflights.describe()\n\n\n\n\n\n\n\n\nyear\npassengers\n\n\n\n\ncount\n144.000000\n144.000000\n\n\nmean\n1954.500000\n280.298611\n\n\nstd\n3.464102\n119.966317\n\n\nmin\n1949.000000\n104.000000\n\n\n25%\n1951.750000\n180.000000\n\n\n50%\n1954.500000\n265.500000\n\n\n75%\n1957.250000\n360.500000\n\n\nmax\n1960.000000\n622.000000\n\n\n\n\n\n\n\n\nflights.describe(include = \"category\")\n\n\n\n\n\n\n\n\nmonth\n\n\n\n\ncount\n144\n\n\nunique\n12\n\n\ntop\nJan\n\n\nfreq\n12\n\n\n\n\n\n\n\n\nflights.year.head(), flights['year'].head(), flights[['year', 'passengers']].head()\n\n(0    1949\n 1    1949\n 2    1949\n 3    1949\n 4    1949\n Name: year, dtype: int64,\n 0    1949\n 1    1949\n 2    1949\n 3    1949\n 4    1949\n Name: year, dtype: int64,\n    year  passengers\n 0  1949         112\n 1  1949         118\n 2  1949         132\n 3  1949         129\n 4  1949         121)\n\n\n\nflights.iloc[1]\n\nyear          1949\nmonth          Feb\npassengers     118\nName: 1, dtype: object\n\n\n\nflights.loc[1, 'year']\n\n1949\n\n\n\n# Convert month names to datetime format with the given year\nflights['date'] = flights.apply(lambda row: pd.to_datetime(f\"{row['year']}-{row['month']}-01\"), axis=1)\nflights.set_index('date', inplace=True)\n\n# Drop redundant columns and rename the passengers column for clarity\nflights.drop(['year', 'month'], axis=1, inplace=True)\nflights.rename(columns={'passengers': 'Passengers'}, inplace=True)\n\n# Plot the data\nflights.plot(title=\"Monthly Air Passengers\", figsize=(12,6))\nplt.show()\n\n\n\n\n\ndf = flights\ndf.head()\n\n\n\n\n\n\n\n\nPassengers\n\n\ndate\n\n\n\n\n\n1949-01-01\n112\n\n\n1949-02-01\n118\n\n\n1949-03-01\n132\n\n\n1949-04-01\n129\n\n\n1949-05-01\n121\n\n\n\n\n\n\n\n\ndf.columns\n\nIndex(['Passengers'], dtype='object')\n\n\n\ndf.index\n\nDatetimeIndex(['1949-01-01', '1949-02-01', '1949-03-01', '1949-04-01',\n               '1949-05-01', '1949-06-01', '1949-07-01', '1949-08-01',\n               '1949-09-01', '1949-10-01',\n               ...\n               '1960-03-01', '1960-04-01', '1960-05-01', '1960-06-01',\n               '1960-07-01', '1960-08-01', '1960-09-01', '1960-10-01',\n               '1960-11-01', '1960-12-01'],\n              dtype='datetime64[ns]', name='date', length=144, freq=None)\n\n\n\ndf[\"1960-08-01\":\"1960-12-01\"]\n\n\n\n\n\n\n\n\nPassengers\n\n\ndate\n\n\n\n\n\n1960-08-01\n606\n\n\n1960-09-01\n508\n\n\n1960-10-01\n461\n\n\n1960-11-01\n390\n\n\n1960-12-01\n432\n\n\n\n\n\n\n\n\ndf.Passengers.resample('Y').mean()\n\ndate\n1949-12-31    126.666667\n1950-12-31    139.666667\n1951-12-31    170.166667\n1952-12-31    197.000000\n1953-12-31    225.000000\n1954-12-31    238.916667\n1955-12-31    284.000000\n1956-12-31    328.250000\n1957-12-31    368.416667\n1958-12-31    381.000000\n1959-12-31    428.333333\n1960-12-31    476.166667\nFreq: A-DEC, Name: Passengers, dtype: float64\n\n\n\ndf.Passengers.resample('Y').mean().plot()\n\n&lt;Axes: xlabel='date'&gt;\n\n\n\n\n\n\ndf = pd.read_csv(\"Data/aapl_no_dates.csv\")\ndf.head()\n\n\n\n\n\n\n\n\nOpen\nHigh\nLow\nClose\nVolume\n\n\n\n\n0\n153.17\n153.33\n152.22\n153.18\n16404088\n\n\n1\n153.58\n155.45\n152.89\n155.45\n27770715\n\n\n2\n154.34\n154.45\n153.46\n153.93\n25331662\n\n\n3\n153.90\n155.81\n153.78\n154.45\n26624926\n\n\n4\n155.02\n155.98\n154.48\n155.37\n21069647"
  },
  {
    "objectID": "pandas.html#business-days",
    "href": "pandas.html#business-days",
    "title": "Pandas",
    "section": "Business Days",
    "text": "Business Days\n\nrng = pd.date_range(start=\"6/1/2016\",end=\"6/30/2016\",freq='B')\nrng\n\nDatetimeIndex(['2016-06-01', '2016-06-02', '2016-06-03', '2016-06-06',\n               '2016-06-07', '2016-06-08', '2016-06-09', '2016-06-10',\n               '2016-06-13', '2016-06-14', '2016-06-15', '2016-06-16',\n               '2016-06-17', '2016-06-20', '2016-06-21', '2016-06-22',\n               '2016-06-23', '2016-06-24', '2016-06-27', '2016-06-28',\n               '2016-06-29', '2016-06-30'],\n              dtype='datetime64[ns]', freq='B')\n\n\n\ndf.set_index(rng, inplace=True)\ndf.head()\n\n\n\n\n\n\n\n\nOpen\nHigh\nLow\nClose\nVolume\n\n\n\n\n2016-06-01\n153.17\n153.33\n152.22\n153.18\n16404088\n\n\n2016-06-02\n153.58\n155.45\n152.89\n155.45\n27770715\n\n\n2016-06-03\n154.34\n154.45\n153.46\n153.93\n25331662\n\n\n2016-06-06\n153.90\n155.81\n153.78\n154.45\n26624926\n\n\n2016-06-07\n155.02\n155.98\n154.48\n155.37\n21069647\n\n\n\n\n\n\n\n\ndaily_index = pd.date_range(start=\"6/1/2016\",end=\"6/30/2016\",freq='D')\ndaily_index\n\nDatetimeIndex(['2016-06-01', '2016-06-02', '2016-06-03', '2016-06-04',\n               '2016-06-05', '2016-06-06', '2016-06-07', '2016-06-08',\n               '2016-06-09', '2016-06-10', '2016-06-11', '2016-06-12',\n               '2016-06-13', '2016-06-14', '2016-06-15', '2016-06-16',\n               '2016-06-17', '2016-06-18', '2016-06-19', '2016-06-20',\n               '2016-06-21', '2016-06-22', '2016-06-23', '2016-06-24',\n               '2016-06-25', '2016-06-26', '2016-06-27', '2016-06-28',\n               '2016-06-29', '2016-06-30'],\n              dtype='datetime64[ns]', freq='D')\n\n\n\ndaily_index.difference(df.index)\n\nDatetimeIndex(['2016-06-04', '2016-06-05', '2016-06-11', '2016-06-12',\n               '2016-06-18', '2016-06-19', '2016-06-25', '2016-06-26'],\n              dtype='datetime64[ns]', freq=None)\n\n\n\nBenefits of having DatetimeIndex\n\ndf.Close.plot()\n\n&lt;Axes: &gt;\n\n\n\n\n\n\ndf[\"2016-06-01\":\"2016-06-10\"].Close.mean()\n\n152.72125\n\n\n\ndf.index\n\nDatetimeIndex(['2016-06-01', '2016-06-02', '2016-06-03', '2016-06-06',\n               '2016-06-07', '2016-06-08', '2016-06-09', '2016-06-10',\n               '2016-06-13', '2016-06-14', '2016-06-15', '2016-06-16',\n               '2016-06-17', '2016-06-20', '2016-06-21', '2016-06-22',\n               '2016-06-23', '2016-06-24', '2016-06-27', '2016-06-28',\n               '2016-06-29', '2016-06-30'],\n              dtype='datetime64[ns]', freq='B')\n\n\n\ndf.asfreq('D',method='pad').head()\n\n\n\n\n\n\n\n\nOpen\nHigh\nLow\nClose\nVolume\n\n\n\n\n2016-06-01\n153.17\n153.33\n152.22\n153.18\n16404088\n\n\n2016-06-02\n153.58\n155.45\n152.89\n155.45\n27770715\n\n\n2016-06-03\n154.34\n154.45\n153.46\n153.93\n25331662\n\n\n2016-06-04\n154.34\n154.45\n153.46\n153.93\n25331662\n\n\n2016-06-05\n154.34\n154.45\n153.46\n153.93\n25331662\n\n\n\n\n\n\n\n\ndf.asfreq('W',method='pad')\n\n\n\n\n\n\n\n\nOpen\nHigh\nLow\nClose\nVolume\n\n\n\n\n2016-06-05\n154.34\n154.45\n153.46\n153.93\n25331662\n\n\n2016-06-12\n145.74\n146.09\n142.51\n145.42\n72307330\n\n\n2016-06-19\n143.66\n146.74\n143.66\n146.34\n32541404\n\n\n2016-06-26\n147.17\n148.28\n145.38\n145.82\n25692361\n\n\n\n\n\n\n\n\n\nGenerating DatetimeIndex with periods argument\n\nrng = pd.date_range('1/1/2011', periods=72, freq='H')\nrng\n\nDatetimeIndex(['2011-01-01 00:00:00', '2011-01-01 01:00:00',\n               '2011-01-01 02:00:00', '2011-01-01 03:00:00',\n               '2011-01-01 04:00:00', '2011-01-01 05:00:00',\n               '2011-01-01 06:00:00', '2011-01-01 07:00:00',\n               '2011-01-01 08:00:00', '2011-01-01 09:00:00',\n               '2011-01-01 10:00:00', '2011-01-01 11:00:00',\n               '2011-01-01 12:00:00', '2011-01-01 13:00:00',\n               '2011-01-01 14:00:00', '2011-01-01 15:00:00',\n               '2011-01-01 16:00:00', '2011-01-01 17:00:00',\n               '2011-01-01 18:00:00', '2011-01-01 19:00:00',\n               '2011-01-01 20:00:00', '2011-01-01 21:00:00',\n               '2011-01-01 22:00:00', '2011-01-01 23:00:00',\n               '2011-01-02 00:00:00', '2011-01-02 01:00:00',\n               '2011-01-02 02:00:00', '2011-01-02 03:00:00',\n               '2011-01-02 04:00:00', '2011-01-02 05:00:00',\n               '2011-01-02 06:00:00', '2011-01-02 07:00:00',\n               '2011-01-02 08:00:00', '2011-01-02 09:00:00',\n               '2011-01-02 10:00:00', '2011-01-02 11:00:00',\n               '2011-01-02 12:00:00', '2011-01-02 13:00:00',\n               '2011-01-02 14:00:00', '2011-01-02 15:00:00',\n               '2011-01-02 16:00:00', '2011-01-02 17:00:00',\n               '2011-01-02 18:00:00', '2011-01-02 19:00:00',\n               '2011-01-02 20:00:00', '2011-01-02 21:00:00',\n               '2011-01-02 22:00:00', '2011-01-02 23:00:00',\n               '2011-01-03 00:00:00', '2011-01-03 01:00:00',\n               '2011-01-03 02:00:00', '2011-01-03 03:00:00',\n               '2011-01-03 04:00:00', '2011-01-03 05:00:00',\n               '2011-01-03 06:00:00', '2011-01-03 07:00:00',\n               '2011-01-03 08:00:00', '2011-01-03 09:00:00',\n               '2011-01-03 10:00:00', '2011-01-03 11:00:00',\n               '2011-01-03 12:00:00', '2011-01-03 13:00:00',\n               '2011-01-03 14:00:00', '2011-01-03 15:00:00',\n               '2011-01-03 16:00:00', '2011-01-03 17:00:00',\n               '2011-01-03 18:00:00', '2011-01-03 19:00:00',\n               '2011-01-03 20:00:00', '2011-01-03 21:00:00',\n               '2011-01-03 22:00:00', '2011-01-03 23:00:00'],\n              dtype='datetime64[ns]', freq='H')\n\n\n\nimport numpy as np\nts = pd.Series(np.random.randint(0,10,len(rng)), index=rng)\nts.head(20)\n\n2011-01-01 00:00:00    4\n2011-01-01 01:00:00    4\n2011-01-01 02:00:00    1\n2011-01-01 03:00:00    8\n2011-01-01 04:00:00    0\n2011-01-01 05:00:00    5\n2011-01-01 06:00:00    7\n2011-01-01 07:00:00    6\n2011-01-01 08:00:00    9\n2011-01-01 09:00:00    4\n2011-01-01 10:00:00    3\n2011-01-01 11:00:00    6\n2011-01-01 12:00:00    5\n2011-01-01 13:00:00    8\n2011-01-01 14:00:00    1\n2011-01-01 15:00:00    8\n2011-01-01 16:00:00    8\n2011-01-01 17:00:00    2\n2011-01-01 18:00:00    0\n2011-01-01 19:00:00    0\nFreq: H, dtype: int64\n\n\n\n\nHolidays\n\nrng = pd.date_range(start=\"7/1/2017\", end=\"7/21/2017\", freq='B')\nrng\n\nDatetimeIndex(['2017-07-03', '2017-07-04', '2017-07-05', '2017-07-06',\n               '2017-07-07', '2017-07-10', '2017-07-11', '2017-07-12',\n               '2017-07-13', '2017-07-14', '2017-07-17', '2017-07-18',\n               '2017-07-19', '2017-07-20', '2017-07-21'],\n              dtype='datetime64[ns]', freq='B')\n\n\n\n\nUsing CustomBusinessDay to generate US holidays calendar frequency\n\nfrom pandas.tseries.holiday import USFederalHolidayCalendar\nfrom pandas.tseries.offsets import CustomBusinessDay\n\nus_cal = CustomBusinessDay(calendar=USFederalHolidayCalendar())\n\nrng = pd.date_range(start=\"7/1/2017\",end=\"7/23/2017\", freq=us_cal)\nrng\n\nDatetimeIndex(['2017-07-03', '2017-07-05', '2017-07-06', '2017-07-07',\n               '2017-07-10', '2017-07-11', '2017-07-12', '2017-07-13',\n               '2017-07-14', '2017-07-17', '2017-07-18', '2017-07-19',\n               '2017-07-20', '2017-07-21'],\n              dtype='datetime64[ns]', freq='C')\n\n\n\n\nAbstractHolidayCalendar\n\nfrom pandas.tseries.holiday import AbstractHolidayCalendar, nearest_workday, Holiday\nclass myCalendar(AbstractHolidayCalendar):\n    rules = [\n        Holiday('My Birth Day', month=4, day=15, observance=nearest_workday),\n    ]\n    \nmy_bday = CustomBusinessDay(calendar=myCalendar())\npd.date_range('4/1/2017','4/30/2017',freq=my_bday)\n\nDatetimeIndex(['2017-04-03', '2017-04-04', '2017-04-05', '2017-04-06',\n               '2017-04-07', '2017-04-10', '2017-04-11', '2017-04-12',\n               '2017-04-13', '2017-04-17', '2017-04-18', '2017-04-19',\n               '2017-04-20', '2017-04-21', '2017-04-24', '2017-04-25',\n               '2017-04-26', '2017-04-27', '2017-04-28'],\n              dtype='datetime64[ns]', freq='C')\n\n\n\n\nCustomBusinessDay\n\negypt_weekdays = \"Sun Mon Tue Wed Thu\"\n\nb = CustomBusinessDay(weekmask=egypt_weekdays)\n\npd.date_range(start=\"7/1/2017\",periods=20,freq=b)\n\nDatetimeIndex(['2017-07-02', '2017-07-03', '2017-07-04', '2017-07-05',\n               '2017-07-06', '2017-07-09', '2017-07-10', '2017-07-11',\n               '2017-07-12', '2017-07-13', '2017-07-16', '2017-07-17',\n               '2017-07-18', '2017-07-19', '2017-07-20', '2017-07-23',\n               '2017-07-24', '2017-07-25', '2017-07-26', '2017-07-27'],\n              dtype='datetime64[ns]', freq='C')\n\n\n\nb = CustomBusinessDay(holidays=['2017-07-04', '2017-07-10'], weekmask=egypt_weekdays)\n\npd.date_range(start=\"7/1/2017\",periods=20,freq=b)\n\nDatetimeIndex(['2017-07-02', '2017-07-03', '2017-07-05', '2017-07-06',\n               '2017-07-09', '2017-07-11', '2017-07-12', '2017-07-13',\n               '2017-07-16', '2017-07-17', '2017-07-18', '2017-07-19',\n               '2017-07-20', '2017-07-23', '2017-07-24', '2017-07-25',\n               '2017-07-26', '2017-07-27', '2017-07-30', '2017-07-31'],\n              dtype='datetime64[ns]', freq='C')\n\n\n\n\nMaths\n\nfrom datetime import datetime\ndt = datetime(2017,7,9)\ndt\n\ndatetime.datetime(2017, 7, 9, 0, 0)\n\n\n\ndt + 1*b\n\nTimestamp('2017-07-11 00:00:00')"
  },
  {
    "objectID": "pandas.html#to-datatime",
    "href": "pandas.html#to-datatime",
    "title": "Pandas",
    "section": "To datatime",
    "text": "To datatime\n\nimport pandas as pd\ndates = ['2017-01-05', 'Jan 5, 2017', '01/05/2017', '2017.01.05', '2017/01/05','20170105']\npd.to_datetime(dates)\n\nDatetimeIndex(['2017-01-05', '2017-01-05', '2017-01-05', '2017-01-05',\n               '2017-01-05', '2017-01-05'],\n              dtype='datetime64[ns]', freq=None)\n\n\n\ndt = ['2017-01-05 2:30:00 PM', 'Jan 5, 2017 14:30:00', '01/05/2016', '2017.01.05', '2017/01/05','20170105']\npd.to_datetime(dt)\n\nDatetimeIndex(['2017-01-05 14:30:00', '2017-01-05 14:30:00',\n               '2016-01-05 00:00:00', '2017-01-05 00:00:00',\n               '2017-01-05 00:00:00', '2017-01-05 00:00:00'],\n              dtype='datetime64[ns]', freq=None)\n\n\n\nEuropean style dates with day first\n\npd.to_datetime('30-12-2016', dayfirst=True)\n\nTimestamp('2016-12-30 00:00:00')\n\n\n\npd.to_datetime('5-1-2016', dayfirst=True)\n\nTimestamp('2016-01-05 00:00:00')\n\n\n\n\nCustom date time format\n\npd.to_datetime('2017$01$05', format='%Y$%m$%d')\n\nTimestamp('2017-01-05 00:00:00')\n\n\n\npd.to_datetime('2017#01#05', format='%Y#%m#%d')\n\nTimestamp('2017-01-05 00:00:00')\n\n\n\n\nHandling invalid dates\n\npd.to_datetime(['2017-01-05', 'Jan 6, 2017', 'abc'], errors='ignore')\n\nIndex(['2017-01-05', 'Jan 6, 2017', 'abc'], dtype='object')\n\n\n\npd.to_datetime(['2017-01-05', 'Jan 6, 2017', 'abc'], errors='coerce')\n\nDatetimeIndex(['2017-01-05', '2017-01-06', 'NaT'], dtype='datetime64[ns]', freq=None)"
  },
  {
    "objectID": "pandas.html#epoch",
    "href": "pandas.html#epoch",
    "title": "Pandas",
    "section": "Epoch",
    "text": "Epoch\n\ncurrent_epoch = 1501324478\npd.to_datetime(current_epoch, unit='s')\n\nTimestamp('2017-07-29 10:34:38')\n\n\n\npd.to_datetime(current_epoch*1000, unit='ms')\n\nTimestamp('2017-07-29 10:34:38')\n\n\n\nt = pd.to_datetime([current_epoch], unit='s')\nt\n\nDatetimeIndex(['2017-07-29 10:34:38'], dtype='datetime64[ns]', freq=None)\n\n\n\nt.view('int64')\n\narray([1501324478000000000])\n\n\n\nYearly Period\n\nimport pandas as pd\ny = pd.Period('2016')\ny\n\nPeriod('2016', 'A-DEC')\n\n\n\ny.start_time\n\nTimestamp('2016-01-01 00:00:00')\n\n\n\ny.end_time\n\nTimestamp('2016-12-31 23:59:59.999999999')\n\n\n\ny.is_leap_year\n\nTrue\n\n\n\n\nMonthly Period\n\nm = pd.Period('2017-12')\nm\n\nPeriod('2017-12', 'M')\n\n\n\nm.start_time\n\nTimestamp('2017-12-01 00:00:00')\n\n\n\nm.end_time\n\nTimestamp('2017-12-31 23:59:59.999999999')\n\n\n\nm+1\n\nPeriod('2018-01', 'M')\n\n\n\n\nDaily Period\n\nd = pd.Period('2016-02-28', freq='D')\nd\n\nPeriod('2016-02-28', 'D')\n\n\n\nd.start_time\n\nTimestamp('2016-02-28 00:00:00')\n\n\n\nd.end_time\n\nTimestamp('2016-02-28 23:59:59.999999999')\n\n\n\nd+1\n\nPeriod('2016-02-29', 'D')\n\n\n\n\nHourly Period\n\nh = pd.Period('2017-08-15 23:00:00',freq='H')\nh\n\nPeriod('2017-08-15 23:00', 'H')\n\n\n\nh+1\n\nPeriod('2017-08-16 00:00', 'H')\n\n\n\nh+pd.offsets.Hour(1)\n\nPeriod('2017-08-16 00:00', 'H')\n\n\n\n\nQuarterly Period\n\nq1= pd.Period('2017Q1', freq='Q-JAN')\nq1\n\nPeriod('2017Q1', 'Q-JAN')\n\n\n\nq1.start_time\n\nTimestamp('2016-02-01 00:00:00')\n\n\n\nq1.end_time\n\nTimestamp('2016-04-30 23:59:59.999999999')\n\n\n\nq1.asfreq('M',how='start')\n\nPeriod('2016-02', 'M')\n\n\n\nq1.asfreq('M',how='end')\n\nPeriod('2016-04', 'M')\n\n\n\n\nWeekly Period\n\nw = pd.Period('2017-07-05',freq='W')\nw\n\nPeriod('2017-07-03/2017-07-09', 'W-SUN')\n\n\n\nw-1\n\nPeriod('2017-06-26/2017-07-02', 'W-SUN')\n\n\n\nw2 = pd.Period('2017-08-15',freq='W')\nw2\n\nPeriod('2017-08-14/2017-08-20', 'W-SUN')\n\n\n\nw2-w\n\n&lt;6 * Weeks: weekday=6&gt;\n\n\n\n\nPeriodIndex and period_range\n\nr = pd.period_range('2011', '2017', freq='q')\nr\n\nPeriodIndex(['2011Q1', '2011Q2', '2011Q3', '2011Q4', '2012Q1', '2012Q2',\n             '2012Q3', '2012Q4', '2013Q1', '2013Q2', '2013Q3', '2013Q4',\n             '2014Q1', '2014Q2', '2014Q3', '2014Q4', '2015Q1', '2015Q2',\n             '2015Q3', '2015Q4', '2016Q1', '2016Q2', '2016Q3', '2016Q4',\n             '2017Q1'],\n            dtype='period[Q-DEC]')\n\n\n\nr[0].start_time\n\nTimestamp('2011-01-01 00:00:00')\n\n\n\nr[0].end_time\n\nTimestamp('2011-03-31 23:59:59.999999999')\n\n\n\nidx = pd.period_range('2011', '2017', freq='q-jan')\nidx\n\nPeriodIndex(['2011Q4', '2012Q1', '2012Q2', '2012Q3', '2012Q4', '2013Q1',\n             '2013Q2', '2013Q3', '2013Q4', '2014Q1', '2014Q2', '2014Q3',\n             '2014Q4', '2015Q1', '2015Q2', '2015Q3', '2015Q4', '2016Q1',\n             '2016Q2', '2016Q3', '2016Q4', '2017Q1', '2017Q2', '2017Q3',\n             '2017Q4'],\n            dtype='period[Q-JAN]')\n\n\n\nr[0].start_time\n\nTimestamp('2011-01-01 00:00:00')\n\n\n\nr[0].end_time\n\nTimestamp('2011-03-31 23:59:59.999999999')\n\n\n\nr = pd.period_range(start='2016-01', periods=10, freq='M')\nr\n\nPeriodIndex(['2016-01', '2016-02', '2016-03', '2016-04', '2016-05', '2016-06',\n             '2016-07', '2016-08', '2016-09', '2016-10'],\n            dtype='period[M]')\n\n\n\nimport numpy as np\nps = pd.Series(np.random.randn(len(idx)), idx)\nps\n\n2011Q4   -0.412550\n2012Q1    0.701174\n2012Q2    0.385101\n2012Q3    0.989325\n2012Q4   -0.858848\n2013Q1   -0.137989\n2013Q2    0.410097\n2013Q3    1.391899\n2013Q4    1.414134\n2014Q1   -0.144215\n2014Q2   -0.305327\n2014Q3    0.025925\n2014Q4    0.269103\n2015Q1    1.953641\n2015Q2    1.455620\n2015Q3    0.403967\n2015Q4    1.119294\n2016Q1    0.650177\n2016Q2    1.216127\n2016Q3   -0.784484\n2016Q4   -2.146994\n2017Q1    0.410092\n2017Q2    1.031284\n2017Q3    0.681366\n2017Q4   -1.082856\nFreq: Q-JAN, dtype: float64\n\n\n\nps['2016']\n\n2016Q4   -2.146994\n2017Q1    0.410092\n2017Q2    1.031284\n2017Q3    0.681366\n2017Q4   -1.082856\nFreq: Q-JAN, dtype: float64\n\n\n\nps['2016':'2017']\n\n2016Q4   -2.146994\n2017Q1    0.410092\n2017Q2    1.031284\n2017Q3    0.681366\n2017Q4   -1.082856\nFreq: Q-JAN, dtype: float64\n\n\n\npst = ps.to_timestamp()\npst\n\n2010-11-01   -0.412550\n2011-02-01    0.701174\n2011-05-01    0.385101\n2011-08-01    0.989325\n2011-11-01   -0.858848\n2012-02-01   -0.137989\n2012-05-01    0.410097\n2012-08-01    1.391899\n2012-11-01    1.414134\n2013-02-01   -0.144215\n2013-05-01   -0.305327\n2013-08-01    0.025925\n2013-11-01    0.269103\n2014-02-01    1.953641\n2014-05-01    1.455620\n2014-08-01    0.403967\n2014-11-01    1.119294\n2015-02-01    0.650177\n2015-05-01    1.216127\n2015-08-01   -0.784484\n2015-11-01   -2.146994\n2016-02-01    0.410092\n2016-05-01    1.031284\n2016-08-01    0.681366\n2016-11-01   -1.082856\nFreq: QS-NOV, dtype: float64\n\n\n\npst.index\n\nDatetimeIndex(['2010-11-01', '2011-02-01', '2011-05-01', '2011-08-01',\n               '2011-11-01', '2012-02-01', '2012-05-01', '2012-08-01',\n               '2012-11-01', '2013-02-01', '2013-05-01', '2013-08-01',\n               '2013-11-01', '2014-02-01', '2014-05-01', '2014-08-01',\n               '2014-11-01', '2015-02-01', '2015-05-01', '2015-08-01',\n               '2015-11-01', '2016-02-01', '2016-05-01', '2016-08-01',\n               '2016-11-01'],\n              dtype='datetime64[ns]', freq='QS-NOV')\n\n\n\nps = pst.to_period()\nps\n\n2010Q4   -0.412550\n2011Q1    0.701174\n2011Q2    0.385101\n2011Q3    0.989325\n2011Q4   -0.858848\n2012Q1   -0.137989\n2012Q2    0.410097\n2012Q3    1.391899\n2012Q4    1.414134\n2013Q1   -0.144215\n2013Q2   -0.305327\n2013Q3    0.025925\n2013Q4    0.269103\n2014Q1    1.953641\n2014Q2    1.455620\n2014Q3    0.403967\n2014Q4    1.119294\n2015Q1    0.650177\n2015Q2    1.216127\n2015Q3   -0.784484\n2015Q4   -2.146994\n2016Q1    0.410092\n2016Q2    1.031284\n2016Q3    0.681366\n2016Q4   -1.082856\nFreq: Q-DEC, dtype: float64\n\n\n\nps.index\n\nPeriodIndex(['2010Q4', '2011Q1', '2011Q2', '2011Q3', '2011Q4', '2012Q1',\n             '2012Q2', '2012Q3', '2012Q4', '2013Q1', '2013Q2', '2013Q3',\n             '2013Q4', '2014Q1', '2014Q2', '2014Q3', '2014Q4', '2015Q1',\n             '2015Q2', '2015Q3', '2015Q4', '2016Q1', '2016Q2', '2016Q3',\n             '2016Q4'],\n            dtype='period[Q-DEC]')"
  },
  {
    "objectID": "pandas.html#processing-wal-marts-financials",
    "href": "pandas.html#processing-wal-marts-financials",
    "title": "Pandas",
    "section": "Processing Wal Mart’s Financials",
    "text": "Processing Wal Mart’s Financials\n\nimport pandas as pd\ndf = pd.read_csv(\"Data/wmt.csv\")\ndf\n\n\n\n\n\n\n\n\nLine Item\n2017Q1\n2017Q2\n2017Q3\n2017Q4\n2018Q1\n\n\n\n\n0\nRevenue\n115904\n120854\n118179\n130936\n117542\n\n\n1\nExpenses\n86544\n89485\n87484\n97743\n87688\n\n\n2\nProfit\n29360\n31369\n30695\n33193\n29854\n\n\n\n\n\n\n\n\ndf.set_index(\"Line Item\",inplace=True)\ndf = df.T\ndf\n\n\n\n\n\n\n\nLine Item\nRevenue\nExpenses\nProfit\n\n\n\n\n2017Q1\n115904\n86544\n29360\n\n\n2017Q2\n120854\n89485\n31369\n\n\n2017Q3\n118179\n87484\n30695\n\n\n2017Q4\n130936\n97743\n33193\n\n\n2018Q1\n117542\n87688\n29854\n\n\n\n\n\n\n\n\ndf.index\n\nIndex(['2017Q1', '2017Q2', '2017Q3', '2017Q4', '2018Q1'], dtype='object')\n\n\n\ndf.index = pd.PeriodIndex(df.index, freq=\"Q-JAN\")\ndf\n\n\n\n\n\n\n\nLine Item\nRevenue\nExpenses\nProfit\n\n\n\n\n2017Q1\n115904\n86544\n29360\n\n\n2017Q2\n120854\n89485\n31369\n\n\n2017Q3\n118179\n87484\n30695\n\n\n2017Q4\n130936\n97743\n33193\n\n\n2018Q1\n117542\n87688\n29854\n\n\n\n\n\n\n\n\ndf.index\n\nPeriodIndex(['2017Q1', '2017Q2', '2017Q3', '2017Q4', '2018Q1'], dtype='period[Q-JAN]')\n\n\n\ndf.index[0].start_time\n\nTimestamp('2016-02-01 00:00:00')\n\n\n\nAdd start date end date columns to dataframe\n\ndf[\"Start Date\"]=df.index.map(lambda x: x.start_time)\ndf\n\n\n\n\n\n\n\nLine Item\nRevenue\nExpenses\nProfit\nStart Date\n\n\n\n\n2017Q1\n115904\n86544\n29360\n2016-02-01\n\n\n2017Q2\n120854\n89485\n31369\n2016-05-01\n\n\n2017Q3\n118179\n87484\n30695\n2016-08-01\n\n\n2017Q4\n130936\n97743\n33193\n2016-11-01\n\n\n2018Q1\n117542\n87688\n29854\n2017-02-01\n\n\n\n\n\n\n\n\ndf[\"End Date\"]=df.index.map(lambda x: x.end_time)\ndf\n\n\n\n\n\n\n\nLine Item\nRevenue\nExpenses\nProfit\nStart Date\nEnd Date\n\n\n\n\n2017Q1\n115904\n86544\n29360\n2016-02-01\n2016-04-30 23:59:59.999999999\n\n\n2017Q2\n120854\n89485\n31369\n2016-05-01\n2016-07-31 23:59:59.999999999\n\n\n2017Q3\n118179\n87484\n30695\n2016-08-01\n2016-10-31 23:59:59.999999999\n\n\n2017Q4\n130936\n97743\n33193\n2016-11-01\n2017-01-31 23:59:59.999999999\n\n\n2018Q1\n117542\n87688\n29854\n2017-02-01\n2017-04-30 23:59:59.999999999"
  },
  {
    "objectID": "pandas.html#timezone-handling",
    "href": "pandas.html#timezone-handling",
    "title": "Pandas",
    "section": "Timezone Handling",
    "text": "Timezone Handling\n\nimport pandas as pd\ndf = pd.read_csv(\"Data/msft.csv\", header=1,index_col='Date Time',parse_dates=True)\ndf\n\n\n\n\n\n\n\n\nPrice\n\n\nDate Time\n\n\n\n\n\n2017-08-17 09:00:00\n72.38\n\n\n2017-08-17 09:15:00\n71.00\n\n\n2017-08-17 09:30:00\n71.67\n\n\n2017-08-17 10:00:00\n72.80\n\n\n2017-08-17 10:30:00\n73.00\n\n\n2017-08-17 11:00:00\n72.50\n\n\n\n\n\n\n\n\ndf.index\n\nDatetimeIndex(['2017-08-17 09:00:00', '2017-08-17 09:15:00',\n               '2017-08-17 09:30:00', '2017-08-17 10:00:00',\n               '2017-08-17 10:30:00', '2017-08-17 11:00:00'],\n              dtype='datetime64[ns]', name='Date Time', freq=None)\n\n\n\ndf.tz_localize(tz='US/Eastern')\ndf\n\n\n\n\n\n\n\n\nPrice\n\n\nDate Time\n\n\n\n\n\n2017-08-17 09:00:00\n72.38\n\n\n2017-08-17 09:15:00\n71.00\n\n\n2017-08-17 09:30:00\n71.67\n\n\n2017-08-17 10:00:00\n72.80\n\n\n2017-08-17 10:30:00\n73.00\n\n\n2017-08-17 11:00:00\n72.50\n\n\n\n\n\n\n\n\ndf.index = df.index.tz_localize(tz='US/Eastern')\ndf.index\n\nDatetimeIndex(['2017-08-17 09:00:00-04:00', '2017-08-17 09:15:00-04:00',\n               '2017-08-17 09:30:00-04:00', '2017-08-17 10:00:00-04:00',\n               '2017-08-17 10:30:00-04:00', '2017-08-17 11:00:00-04:00'],\n              dtype='datetime64[ns, US/Eastern]', name='Date Time', freq=None)\n\n\n\nConvert to Berlin time using tz_convert\n\ndf = df.tz_convert('Europe/Berlin')\ndf\n\n\n\n\n\n\n\n\nPrice\n\n\nDate Time\n\n\n\n\n\n2017-08-17 15:00:00+02:00\n72.38\n\n\n2017-08-17 15:15:00+02:00\n71.00\n\n\n2017-08-17 15:30:00+02:00\n71.67\n\n\n2017-08-17 16:00:00+02:00\n72.80\n\n\n2017-08-17 16:30:00+02:00\n73.00\n\n\n2017-08-17 17:00:00+02:00\n72.50\n\n\n\n\n\n\n\n\ndf.index\n\nDatetimeIndex(['2017-08-17 15:00:00+02:00', '2017-08-17 15:15:00+02:00',\n               '2017-08-17 15:30:00+02:00', '2017-08-17 16:00:00+02:00',\n               '2017-08-17 16:30:00+02:00', '2017-08-17 17:00:00+02:00'],\n              dtype='datetime64[ns, Europe/Berlin]', name='Date Time', freq=None)\n\n\n\nfrom pytz import all_timezones\nprint (all_timezones)\n\n['Africa/Abidjan', 'Africa/Accra', 'Africa/Addis_Ababa', 'Africa/Algiers', 'Africa/Asmara', 'Africa/Asmera', 'Africa/Bamako', 'Africa/Bangui', 'Africa/Banjul', 'Africa/Bissau', 'Africa/Blantyre', 'Africa/Brazzaville', 'Africa/Bujumbura', 'Africa/Cairo', 'Africa/Casablanca', 'Africa/Ceuta', 'Africa/Conakry', 'Africa/Dakar', 'Africa/Dar_es_Salaam', 'Africa/Djibouti', 'Africa/Douala', 'Africa/El_Aaiun', 'Africa/Freetown', 'Africa/Gaborone', 'Africa/Harare', 'Africa/Johannesburg', 'Africa/Juba', 'Africa/Kampala', 'Africa/Khartoum', 'Africa/Kigali', 'Africa/Kinshasa', 'Africa/Lagos', 'Africa/Libreville', 'Africa/Lome', 'Africa/Luanda', 'Africa/Lubumbashi', 'Africa/Lusaka', 'Africa/Malabo', 'Africa/Maputo', 'Africa/Maseru', 'Africa/Mbabane', 'Africa/Mogadishu', 'Africa/Monrovia', 'Africa/Nairobi', 'Africa/Ndjamena', 'Africa/Niamey', 'Africa/Nouakchott', 'Africa/Ouagadougou', 'Africa/Porto-Novo', 'Africa/Sao_Tome', 'Africa/Timbuktu', 'Africa/Tripoli', 'Africa/Tunis', 'Africa/Windhoek', 'America/Adak', 'America/Anchorage', 'America/Anguilla', 'America/Antigua', 'America/Araguaina', 'America/Argentina/Buenos_Aires', 'America/Argentina/Catamarca', 'America/Argentina/ComodRivadavia', 'America/Argentina/Cordoba', 'America/Argentina/Jujuy', 'America/Argentina/La_Rioja', 'America/Argentina/Mendoza', 'America/Argentina/Rio_Gallegos', 'America/Argentina/Salta', 'America/Argentina/San_Juan', 'America/Argentina/San_Luis', 'America/Argentina/Tucuman', 'America/Argentina/Ushuaia', 'America/Aruba', 'America/Asuncion', 'America/Atikokan', 'America/Atka', 'America/Bahia', 'America/Bahia_Banderas', 'America/Barbados', 'America/Belem', 'America/Belize', 'America/Blanc-Sablon', 'America/Boa_Vista', 'America/Bogota', 'America/Boise', 'America/Buenos_Aires', 'America/Cambridge_Bay', 'America/Campo_Grande', 'America/Cancun', 'America/Caracas', 'America/Catamarca', 'America/Cayenne', 'America/Cayman', 'America/Chicago', 'America/Chihuahua', 'America/Ciudad_Juarez', 'America/Coral_Harbour', 'America/Cordoba', 'America/Costa_Rica', 'America/Creston', 'America/Cuiaba', 'America/Curacao', 'America/Danmarkshavn', 'America/Dawson', 'America/Dawson_Creek', 'America/Denver', 'America/Detroit', 'America/Dominica', 'America/Edmonton', 'America/Eirunepe', 'America/El_Salvador', 'America/Ensenada', 'America/Fort_Nelson', 'America/Fort_Wayne', 'America/Fortaleza', 'America/Glace_Bay', 'America/Godthab', 'America/Goose_Bay', 'America/Grand_Turk', 'America/Grenada', 'America/Guadeloupe', 'America/Guatemala', 'America/Guayaquil', 'America/Guyana', 'America/Halifax', 'America/Havana', 'America/Hermosillo', 'America/Indiana/Indianapolis', 'America/Indiana/Knox', 'America/Indiana/Marengo', 'America/Indiana/Petersburg', 'America/Indiana/Tell_City', 'America/Indiana/Vevay', 'America/Indiana/Vincennes', 'America/Indiana/Winamac', 'America/Indianapolis', 'America/Inuvik', 'America/Iqaluit', 'America/Jamaica', 'America/Jujuy', 'America/Juneau', 'America/Kentucky/Louisville', 'America/Kentucky/Monticello', 'America/Knox_IN', 'America/Kralendijk', 'America/La_Paz', 'America/Lima', 'America/Los_Angeles', 'America/Louisville', 'America/Lower_Princes', 'America/Maceio', 'America/Managua', 'America/Manaus', 'America/Marigot', 'America/Martinique', 'America/Matamoros', 'America/Mazatlan', 'America/Mendoza', 'America/Menominee', 'America/Merida', 'America/Metlakatla', 'America/Mexico_City', 'America/Miquelon', 'America/Moncton', 'America/Monterrey', 'America/Montevideo', 'America/Montreal', 'America/Montserrat', 'America/Nassau', 'America/New_York', 'America/Nipigon', 'America/Nome', 'America/Noronha', 'America/North_Dakota/Beulah', 'America/North_Dakota/Center', 'America/North_Dakota/New_Salem', 'America/Nuuk', 'America/Ojinaga', 'America/Panama', 'America/Pangnirtung', 'America/Paramaribo', 'America/Phoenix', 'America/Port-au-Prince', 'America/Port_of_Spain', 'America/Porto_Acre', 'America/Porto_Velho', 'America/Puerto_Rico', 'America/Punta_Arenas', 'America/Rainy_River', 'America/Rankin_Inlet', 'America/Recife', 'America/Regina', 'America/Resolute', 'America/Rio_Branco', 'America/Rosario', 'America/Santa_Isabel', 'America/Santarem', 'America/Santiago', 'America/Santo_Domingo', 'America/Sao_Paulo', 'America/Scoresbysund', 'America/Shiprock', 'America/Sitka', 'America/St_Barthelemy', 'America/St_Johns', 'America/St_Kitts', 'America/St_Lucia', 'America/St_Thomas', 'America/St_Vincent', 'America/Swift_Current', 'America/Tegucigalpa', 'America/Thule', 'America/Thunder_Bay', 'America/Tijuana', 'America/Toronto', 'America/Tortola', 'America/Vancouver', 'America/Virgin', 'America/Whitehorse', 'America/Winnipeg', 'America/Yakutat', 'America/Yellowknife', 'Antarctica/Casey', 'Antarctica/Davis', 'Antarctica/DumontDUrville', 'Antarctica/Macquarie', 'Antarctica/Mawson', 'Antarctica/McMurdo', 'Antarctica/Palmer', 'Antarctica/Rothera', 'Antarctica/South_Pole', 'Antarctica/Syowa', 'Antarctica/Troll', 'Antarctica/Vostok', 'Arctic/Longyearbyen', 'Asia/Aden', 'Asia/Almaty', 'Asia/Amman', 'Asia/Anadyr', 'Asia/Aqtau', 'Asia/Aqtobe', 'Asia/Ashgabat', 'Asia/Ashkhabad', 'Asia/Atyrau', 'Asia/Baghdad', 'Asia/Bahrain', 'Asia/Baku', 'Asia/Bangkok', 'Asia/Barnaul', 'Asia/Beirut', 'Asia/Bishkek', 'Asia/Brunei', 'Asia/Calcutta', 'Asia/Chita', 'Asia/Choibalsan', 'Asia/Chongqing', 'Asia/Chungking', 'Asia/Colombo', 'Asia/Dacca', 'Asia/Damascus', 'Asia/Dhaka', 'Asia/Dili', 'Asia/Dubai', 'Asia/Dushanbe', 'Asia/Famagusta', 'Asia/Gaza', 'Asia/Harbin', 'Asia/Hebron', 'Asia/Ho_Chi_Minh', 'Asia/Hong_Kong', 'Asia/Hovd', 'Asia/Irkutsk', 'Asia/Istanbul', 'Asia/Jakarta', 'Asia/Jayapura', 'Asia/Jerusalem', 'Asia/Kabul', 'Asia/Kamchatka', 'Asia/Karachi', 'Asia/Kashgar', 'Asia/Kathmandu', 'Asia/Katmandu', 'Asia/Khandyga', 'Asia/Kolkata', 'Asia/Krasnoyarsk', 'Asia/Kuala_Lumpur', 'Asia/Kuching', 'Asia/Kuwait', 'Asia/Macao', 'Asia/Macau', 'Asia/Magadan', 'Asia/Makassar', 'Asia/Manila', 'Asia/Muscat', 'Asia/Nicosia', 'Asia/Novokuznetsk', 'Asia/Novosibirsk', 'Asia/Omsk', 'Asia/Oral', 'Asia/Phnom_Penh', 'Asia/Pontianak', 'Asia/Pyongyang', 'Asia/Qatar', 'Asia/Qostanay', 'Asia/Qyzylorda', 'Asia/Rangoon', 'Asia/Riyadh', 'Asia/Saigon', 'Asia/Sakhalin', 'Asia/Samarkand', 'Asia/Seoul', 'Asia/Shanghai', 'Asia/Singapore', 'Asia/Srednekolymsk', 'Asia/Taipei', 'Asia/Tashkent', 'Asia/Tbilisi', 'Asia/Tehran', 'Asia/Tel_Aviv', 'Asia/Thimbu', 'Asia/Thimphu', 'Asia/Tokyo', 'Asia/Tomsk', 'Asia/Ujung_Pandang', 'Asia/Ulaanbaatar', 'Asia/Ulan_Bator', 'Asia/Urumqi', 'Asia/Ust-Nera', 'Asia/Vientiane', 'Asia/Vladivostok', 'Asia/Yakutsk', 'Asia/Yangon', 'Asia/Yekaterinburg', 'Asia/Yerevan', 'Atlantic/Azores', 'Atlantic/Bermuda', 'Atlantic/Canary', 'Atlantic/Cape_Verde', 'Atlantic/Faeroe', 'Atlantic/Faroe', 'Atlantic/Jan_Mayen', 'Atlantic/Madeira', 'Atlantic/Reykjavik', 'Atlantic/South_Georgia', 'Atlantic/St_Helena', 'Atlantic/Stanley', 'Australia/ACT', 'Australia/Adelaide', 'Australia/Brisbane', 'Australia/Broken_Hill', 'Australia/Canberra', 'Australia/Currie', 'Australia/Darwin', 'Australia/Eucla', 'Australia/Hobart', 'Australia/LHI', 'Australia/Lindeman', 'Australia/Lord_Howe', 'Australia/Melbourne', 'Australia/NSW', 'Australia/North', 'Australia/Perth', 'Australia/Queensland', 'Australia/South', 'Australia/Sydney', 'Australia/Tasmania', 'Australia/Victoria', 'Australia/West', 'Australia/Yancowinna', 'Brazil/Acre', 'Brazil/DeNoronha', 'Brazil/East', 'Brazil/West', 'CET', 'CST6CDT', 'Canada/Atlantic', 'Canada/Central', 'Canada/Eastern', 'Canada/Mountain', 'Canada/Newfoundland', 'Canada/Pacific', 'Canada/Saskatchewan', 'Canada/Yukon', 'Chile/Continental', 'Chile/EasterIsland', 'Cuba', 'EET', 'EST', 'EST5EDT', 'Egypt', 'Eire', 'Etc/GMT', 'Etc/GMT+0', 'Etc/GMT+1', 'Etc/GMT+10', 'Etc/GMT+11', 'Etc/GMT+12', 'Etc/GMT+2', 'Etc/GMT+3', 'Etc/GMT+4', 'Etc/GMT+5', 'Etc/GMT+6', 'Etc/GMT+7', 'Etc/GMT+8', 'Etc/GMT+9', 'Etc/GMT-0', 'Etc/GMT-1', 'Etc/GMT-10', 'Etc/GMT-11', 'Etc/GMT-12', 'Etc/GMT-13', 'Etc/GMT-14', 'Etc/GMT-2', 'Etc/GMT-3', 'Etc/GMT-4', 'Etc/GMT-5', 'Etc/GMT-6', 'Etc/GMT-7', 'Etc/GMT-8', 'Etc/GMT-9', 'Etc/GMT0', 'Etc/Greenwich', 'Etc/UCT', 'Etc/UTC', 'Etc/Universal', 'Etc/Zulu', 'Europe/Amsterdam', 'Europe/Andorra', 'Europe/Astrakhan', 'Europe/Athens', 'Europe/Belfast', 'Europe/Belgrade', 'Europe/Berlin', 'Europe/Bratislava', 'Europe/Brussels', 'Europe/Bucharest', 'Europe/Budapest', 'Europe/Busingen', 'Europe/Chisinau', 'Europe/Copenhagen', 'Europe/Dublin', 'Europe/Gibraltar', 'Europe/Guernsey', 'Europe/Helsinki', 'Europe/Isle_of_Man', 'Europe/Istanbul', 'Europe/Jersey', 'Europe/Kaliningrad', 'Europe/Kiev', 'Europe/Kirov', 'Europe/Kyiv', 'Europe/Lisbon', 'Europe/Ljubljana', 'Europe/London', 'Europe/Luxembourg', 'Europe/Madrid', 'Europe/Malta', 'Europe/Mariehamn', 'Europe/Minsk', 'Europe/Monaco', 'Europe/Moscow', 'Europe/Nicosia', 'Europe/Oslo', 'Europe/Paris', 'Europe/Podgorica', 'Europe/Prague', 'Europe/Riga', 'Europe/Rome', 'Europe/Samara', 'Europe/San_Marino', 'Europe/Sarajevo', 'Europe/Saratov', 'Europe/Simferopol', 'Europe/Skopje', 'Europe/Sofia', 'Europe/Stockholm', 'Europe/Tallinn', 'Europe/Tirane', 'Europe/Tiraspol', 'Europe/Ulyanovsk', 'Europe/Uzhgorod', 'Europe/Vaduz', 'Europe/Vatican', 'Europe/Vienna', 'Europe/Vilnius', 'Europe/Volgograd', 'Europe/Warsaw', 'Europe/Zagreb', 'Europe/Zaporozhye', 'Europe/Zurich', 'GB', 'GB-Eire', 'GMT', 'GMT+0', 'GMT-0', 'GMT0', 'Greenwich', 'HST', 'Hongkong', 'Iceland', 'Indian/Antananarivo', 'Indian/Chagos', 'Indian/Christmas', 'Indian/Cocos', 'Indian/Comoro', 'Indian/Kerguelen', 'Indian/Mahe', 'Indian/Maldives', 'Indian/Mauritius', 'Indian/Mayotte', 'Indian/Reunion', 'Iran', 'Israel', 'Jamaica', 'Japan', 'Kwajalein', 'Libya', 'MET', 'MST', 'MST7MDT', 'Mexico/BajaNorte', 'Mexico/BajaSur', 'Mexico/General', 'NZ', 'NZ-CHAT', 'Navajo', 'PRC', 'PST8PDT', 'Pacific/Apia', 'Pacific/Auckland', 'Pacific/Bougainville', 'Pacific/Chatham', 'Pacific/Chuuk', 'Pacific/Easter', 'Pacific/Efate', 'Pacific/Enderbury', 'Pacific/Fakaofo', 'Pacific/Fiji', 'Pacific/Funafuti', 'Pacific/Galapagos', 'Pacific/Gambier', 'Pacific/Guadalcanal', 'Pacific/Guam', 'Pacific/Honolulu', 'Pacific/Johnston', 'Pacific/Kanton', 'Pacific/Kiritimati', 'Pacific/Kosrae', 'Pacific/Kwajalein', 'Pacific/Majuro', 'Pacific/Marquesas', 'Pacific/Midway', 'Pacific/Nauru', 'Pacific/Niue', 'Pacific/Norfolk', 'Pacific/Noumea', 'Pacific/Pago_Pago', 'Pacific/Palau', 'Pacific/Pitcairn', 'Pacific/Pohnpei', 'Pacific/Ponape', 'Pacific/Port_Moresby', 'Pacific/Rarotonga', 'Pacific/Saipan', 'Pacific/Samoa', 'Pacific/Tahiti', 'Pacific/Tarawa', 'Pacific/Tongatapu', 'Pacific/Truk', 'Pacific/Wake', 'Pacific/Wallis', 'Pacific/Yap', 'Poland', 'Portugal', 'ROC', 'ROK', 'Singapore', 'Turkey', 'UCT', 'US/Alaska', 'US/Aleutian', 'US/Arizona', 'US/Central', 'US/East-Indiana', 'US/Eastern', 'US/Hawaii', 'US/Indiana-Starke', 'US/Michigan', 'US/Mountain', 'US/Pacific', 'US/Samoa', 'UTC', 'Universal', 'W-SU', 'WET', 'Zulu']\n\n\n\n\nConvert to Mumbai time\n\ndf.index = df.index.tz_convert('Asia/Calcutta') # tz database doesn't have any Mumbai timezone but calcutta and mumbai are both in same timezone so we will use that\ndf\n\n\n\n\n\n\n\n\nPrice\n\n\nDate Time\n\n\n\n\n\n2017-08-17 18:30:00+05:30\n72.38\n\n\n2017-08-17 18:45:00+05:30\n71.00\n\n\n2017-08-17 19:00:00+05:30\n71.67\n\n\n2017-08-17 19:30:00+05:30\n72.80\n\n\n2017-08-17 20:00:00+05:30\n73.00\n\n\n2017-08-17 20:30:00+05:30\n72.50\n\n\n\n\n\n\n\n\n\nUsing timezones in date_range\n\n(1) timezone using pytz\n\nlondon = pd.date_range('3/6/2012 00:09:00', periods=10, freq='H',tz='Europe/London')\nlondon\n\nDatetimeIndex(['2012-03-06 00:09:00+00:00', '2012-03-06 01:09:00+00:00',\n               '2012-03-06 02:09:00+00:00', '2012-03-06 03:09:00+00:00',\n               '2012-03-06 04:09:00+00:00', '2012-03-06 05:09:00+00:00',\n               '2012-03-06 06:09:00+00:00', '2012-03-06 07:09:00+00:00',\n               '2012-03-06 08:09:00+00:00', '2012-03-06 09:09:00+00:00'],\n              dtype='datetime64[ns, Europe/London]', freq='H')\n\n\n\n\n(2) timezone using dateutil\n\ntd = pd.date_range('3/6/2012 00:00', periods=10, freq='H',tz='dateutil/Europe/London')\ntd\n\nDatetimeIndex(['2012-03-06 00:00:00+00:00', '2012-03-06 01:00:00+00:00',\n               '2012-03-06 02:00:00+00:00', '2012-03-06 03:00:00+00:00',\n               '2012-03-06 04:00:00+00:00', '2012-03-06 05:00:00+00:00',\n               '2012-03-06 06:00:00+00:00', '2012-03-06 07:00:00+00:00',\n               '2012-03-06 08:00:00+00:00', '2012-03-06 09:00:00+00:00'],\n              dtype='datetime64[ns, tzfile('/usr/share/zoneinfo/Europe/London')]', freq='H')\n\n\n\n\n\nAirthmetic between different timezones\n\nrng = pd.date_range(start=\"2017-08-22 09:00:00\",periods=10, freq='30min')\ns = pd.Series(range(10),index=rng)\ns\n\n2017-08-22 09:00:00    0\n2017-08-22 09:30:00    1\n2017-08-22 10:00:00    2\n2017-08-22 10:30:00    3\n2017-08-22 11:00:00    4\n2017-08-22 11:30:00    5\n2017-08-22 12:00:00    6\n2017-08-22 12:30:00    7\n2017-08-22 13:00:00    8\n2017-08-22 13:30:00    9\nFreq: 30T, dtype: int64\n\n\n\nb = s.tz_localize(tz=\"Europe/Berlin\")\nb\n\n2017-08-22 09:00:00+02:00    0\n2017-08-22 09:30:00+02:00    1\n2017-08-22 10:00:00+02:00    2\n2017-08-22 10:30:00+02:00    3\n2017-08-22 11:00:00+02:00    4\n2017-08-22 11:30:00+02:00    5\n2017-08-22 12:00:00+02:00    6\n2017-08-22 12:30:00+02:00    7\n2017-08-22 13:00:00+02:00    8\n2017-08-22 13:30:00+02:00    9\ndtype: int64\n\n\n\nb.index\n\nDatetimeIndex(['2017-08-22 09:00:00+02:00', '2017-08-22 09:30:00+02:00',\n               '2017-08-22 10:00:00+02:00', '2017-08-22 10:30:00+02:00',\n               '2017-08-22 11:00:00+02:00', '2017-08-22 11:30:00+02:00',\n               '2017-08-22 12:00:00+02:00', '2017-08-22 12:30:00+02:00',\n               '2017-08-22 13:00:00+02:00', '2017-08-22 13:30:00+02:00'],\n              dtype='datetime64[ns, Europe/Berlin]', freq=None)\n\n\n\nm = s.tz_localize(tz=\"Asia/Calcutta\")\nm.index\n\nDatetimeIndex(['2017-08-22 09:00:00+05:30', '2017-08-22 09:30:00+05:30',\n               '2017-08-22 10:00:00+05:30', '2017-08-22 10:30:00+05:30',\n               '2017-08-22 11:00:00+05:30', '2017-08-22 11:30:00+05:30',\n               '2017-08-22 12:00:00+05:30', '2017-08-22 12:30:00+05:30',\n               '2017-08-22 13:00:00+05:30', '2017-08-22 13:30:00+05:30'],\n              dtype='datetime64[ns, Asia/Calcutta]', freq=None)\n\n\n\nm\n\n2017-08-22 09:00:00+05:30    0\n2017-08-22 09:30:00+05:30    1\n2017-08-22 10:00:00+05:30    2\n2017-08-22 10:30:00+05:30    3\n2017-08-22 11:00:00+05:30    4\n2017-08-22 11:30:00+05:30    5\n2017-08-22 12:00:00+05:30    6\n2017-08-22 12:30:00+05:30    7\n2017-08-22 13:00:00+05:30    8\n2017-08-22 13:30:00+05:30    9\ndtype: int64\n\n\n\nb + m\n\n2017-08-22 03:30:00+00:00     NaN\n2017-08-22 04:00:00+00:00     NaN\n2017-08-22 04:30:00+00:00     NaN\n2017-08-22 05:00:00+00:00     NaN\n2017-08-22 05:30:00+00:00     NaN\n2017-08-22 06:00:00+00:00     NaN\n2017-08-22 06:30:00+00:00     NaN\n2017-08-22 07:00:00+00:00     7.0\n2017-08-22 07:30:00+00:00     9.0\n2017-08-22 08:00:00+00:00    11.0\n2017-08-22 08:30:00+00:00     NaN\n2017-08-22 09:00:00+00:00     NaN\n2017-08-22 09:30:00+00:00     NaN\n2017-08-22 10:00:00+00:00     NaN\n2017-08-22 10:30:00+00:00     NaN\n2017-08-22 11:00:00+00:00     NaN\n2017-08-22 11:30:00+00:00     NaN\ndtype: float64"
  },
  {
    "objectID": "pandas.html#shifting-and-lagging",
    "href": "pandas.html#shifting-and-lagging",
    "title": "Pandas",
    "section": "Shifting and Lagging",
    "text": "Shifting and Lagging\n\nimport pandas as pd\ndf = pd.read_csv(\"Data/fb.csv\",parse_dates=['Date'],index_col='Date')\ndf\n\n\n\n\n\n\n\n\nPrice\n\n\nDate\n\n\n\n\n\n2017-08-15\n171.00\n\n\n2017-08-16\n170.00\n\n\n2017-08-17\n166.91\n\n\n2017-08-18\n167.41\n\n\n2017-08-21\n167.78\n\n\n2017-08-22\n169.64\n\n\n2017-08-23\n168.71\n\n\n2017-08-24\n167.74\n\n\n2017-08-25\n166.32\n\n\n2017-08-28\n167.24\n\n\n\n\n\n\n\n\ndf.shift(1)\n\n\n\n\n\n\n\n\nPrice\n\n\nDate\n\n\n\n\n\n2017-08-15\nNaN\n\n\n2017-08-16\n171.00\n\n\n2017-08-17\n170.00\n\n\n2017-08-18\n166.91\n\n\n2017-08-21\n167.41\n\n\n2017-08-22\n167.78\n\n\n2017-08-23\n169.64\n\n\n2017-08-24\n168.71\n\n\n2017-08-25\n167.74\n\n\n2017-08-28\n166.32\n\n\n\n\n\n\n\n\ndf.shift(-1)\n\n\n\n\n\n\n\n\nPrice\n\n\nDate\n\n\n\n\n\n2017-08-15\n170.00\n\n\n2017-08-16\n166.91\n\n\n2017-08-17\n167.41\n\n\n2017-08-18\n167.78\n\n\n2017-08-21\n169.64\n\n\n2017-08-22\n168.71\n\n\n2017-08-23\n167.74\n\n\n2017-08-24\n166.32\n\n\n2017-08-25\n167.24\n\n\n2017-08-28\nNaN\n\n\n\n\n\n\n\n\ndf['Prev Day Price'] = df['Price'].shift(1)\ndf\n\n\n\n\n\n\n\n\nPrice\nPrev Day Price\n\n\nDate\n\n\n\n\n\n\n2017-08-15\n171.00\nNaN\n\n\n2017-08-16\n170.00\n171.00\n\n\n2017-08-17\n166.91\n170.00\n\n\n2017-08-18\n167.41\n166.91\n\n\n2017-08-21\n167.78\n167.41\n\n\n2017-08-22\n169.64\n167.78\n\n\n2017-08-23\n168.71\n169.64\n\n\n2017-08-24\n167.74\n168.71\n\n\n2017-08-25\n166.32\n167.74\n\n\n2017-08-28\n167.24\n166.32\n\n\n\n\n\n\n\n\ndf['Price Change'] = df['Price'] - df['Prev Day Price']\ndf\n\n\n\n\n\n\n\n\nPrice\nPrev Day Price\nPrice Change\n\n\nDate\n\n\n\n\n\n\n\n2017-08-15\n171.00\nNaN\nNaN\n\n\n2017-08-16\n170.00\n171.00\n-1.00\n\n\n2017-08-17\n166.91\n170.00\n-3.09\n\n\n2017-08-18\n167.41\n166.91\n0.50\n\n\n2017-08-21\n167.78\n167.41\n0.37\n\n\n2017-08-22\n169.64\n167.78\n1.86\n\n\n2017-08-23\n168.71\n169.64\n-0.93\n\n\n2017-08-24\n167.74\n168.71\n-0.97\n\n\n2017-08-25\n166.32\n167.74\n-1.42\n\n\n2017-08-28\n167.24\n166.32\n0.92\n\n\n\n\n\n\n\n\ndf['5 day return'] =  (df['Price'] - df['Price'].shift(5))*100/df['Price'].shift(5)\ndf\n\n\n\n\n\n\n\n\nPrice\nPrev Day Price\nPrice Change\n5 day return\n\n\nDate\n\n\n\n\n\n\n\n\n2017-08-15\n171.00\nNaN\nNaN\nNaN\n\n\n2017-08-16\n170.00\n171.00\n-1.00\nNaN\n\n\n2017-08-17\n166.91\n170.00\n-3.09\nNaN\n\n\n2017-08-18\n167.41\n166.91\n0.50\nNaN\n\n\n2017-08-21\n167.78\n167.41\n0.37\nNaN\n\n\n2017-08-22\n169.64\n167.78\n1.86\n-0.795322\n\n\n2017-08-23\n168.71\n169.64\n-0.93\n-0.758824\n\n\n2017-08-24\n167.74\n168.71\n-0.97\n0.497274\n\n\n2017-08-25\n166.32\n167.74\n-1.42\n-0.651096\n\n\n2017-08-28\n167.24\n166.32\n0.92\n-0.321850\n\n\n\n\n\n\n\n\ndf = df[['Price']]\ndf\n\n\n\n\n\n\n\n\nPrice\n\n\nDate\n\n\n\n\n\n2017-08-15\n171.00\n\n\n2017-08-16\n170.00\n\n\n2017-08-17\n166.91\n\n\n2017-08-18\n167.41\n\n\n2017-08-21\n167.78\n\n\n2017-08-22\n169.64\n\n\n2017-08-23\n168.71\n\n\n2017-08-24\n167.74\n\n\n2017-08-25\n166.32\n\n\n2017-08-28\n167.24\n\n\n\n\n\n\n\n\ntshift\n\ndf.index\n\nDatetimeIndex(['2017-08-15', '2017-08-16', '2017-08-17', '2017-08-18',\n               '2017-08-21', '2017-08-22', '2017-08-23', '2017-08-24',\n               '2017-08-25', '2017-08-28'],\n              dtype='datetime64[ns]', name='Date', freq=None)\n\n\n\ndf.index = pd.date_range(start='2017-08-15',periods=10, freq='B')\ndf\n\n\n\n\n\n\n\n\nPrice\n\n\n\n\n2017-08-15\n171.00\n\n\n2017-08-16\n170.00\n\n\n2017-08-17\n166.91\n\n\n2017-08-18\n167.41\n\n\n2017-08-21\n167.78\n\n\n2017-08-22\n169.64\n\n\n2017-08-23\n168.71\n\n\n2017-08-24\n167.74\n\n\n2017-08-25\n166.32\n\n\n2017-08-28\n167.24\n\n\n\n\n\n\n\n\ndf.index\n\nDatetimeIndex(['2017-08-15', '2017-08-16', '2017-08-17', '2017-08-18',\n               '2017-08-21', '2017-08-22', '2017-08-23', '2017-08-24',\n               '2017-08-25', '2017-08-28'],\n              dtype='datetime64[ns]', freq='B')"
  },
  {
    "objectID": "altair.html",
    "href": "altair.html",
    "title": "Altair",
    "section": "",
    "text": "pip install altair vega_datasets\n\n!pip list | grep altair\n!pip list | grep vega_datasets\n!pip list | grep pandas\n!pip list | grep geopandas\n\naltair                        5.1.2\ngeopandas                     0.14.1\npandas                        1.5.3\ngeopandas                     0.14.1\n\n\n\nimport altair as alt\nimport numpy as np\nimport pandas as pd\n\n# Compute x^2 + y^2 across a 2D grid\nx, y = np.meshgrid(range(-5, 5), range(-5, 5))\nz = x ** 2 + y ** 2\n\n# Convert this grid to columnar data expected by Altair\nsource = pd.DataFrame({'x': x.ravel(),\n                     'y': y.ravel(),\n                     'z': z.ravel()})\n\nalt.Chart(source).mark_rect().encode(\n    x='x:O',\n    y='y:O',\n    color='z:Q'\n)\n\n\n\n\n\n\n\n\nimport altair as alt\nimport pandas as pd\n\nsource = pd.DataFrame(\n    [\n        {\"a\": \"a1\", \"b\": \"b1\", \"c\": \"x\", \"p\": \"0.14\"},\n        {\"a\": \"a1\", \"b\": \"b1\", \"c\": \"y\", \"p\": \"0.60\"},\n        {\"a\": \"a1\", \"b\": \"b1\", \"c\": \"z\", \"p\": \"0.03\"},\n        {\"a\": \"a1\", \"b\": \"b2\", \"c\": \"x\", \"p\": \"0.80\"},\n        {\"a\": \"a1\", \"b\": \"b2\", \"c\": \"y\", \"p\": \"0.38\"},\n        {\"a\": \"a1\", \"b\": \"b2\", \"c\": \"z\", \"p\": \"0.55\"},\n        {\"a\": \"a1\", \"b\": \"b3\", \"c\": \"x\", \"p\": \"0.11\"},\n        {\"a\": \"a1\", \"b\": \"b3\", \"c\": \"y\", \"p\": \"0.58\"},\n        {\"a\": \"a1\", \"b\": \"b3\", \"c\": \"z\", \"p\": \"0.79\"},\n        {\"a\": \"a2\", \"b\": \"b1\", \"c\": \"x\", \"p\": \"0.83\"},\n        {\"a\": \"a2\", \"b\": \"b1\", \"c\": \"y\", \"p\": \"0.87\"},\n        {\"a\": \"a2\", \"b\": \"b1\", \"c\": \"z\", \"p\": \"0.67\"},\n        {\"a\": \"a2\", \"b\": \"b2\", \"c\": \"x\", \"p\": \"0.97\"},\n        {\"a\": \"a2\", \"b\": \"b2\", \"c\": \"y\", \"p\": \"0.84\"},\n        {\"a\": \"a2\", \"b\": \"b2\", \"c\": \"z\", \"p\": \"0.90\"},\n        {\"a\": \"a2\", \"b\": \"b3\", \"c\": \"x\", \"p\": \"0.74\"},\n        {\"a\": \"a2\", \"b\": \"b3\", \"c\": \"y\", \"p\": \"0.64\"},\n        {\"a\": \"a2\", \"b\": \"b3\", \"c\": \"z\", \"p\": \"0.19\"},\n        {\"a\": \"a3\", \"b\": \"b1\", \"c\": \"x\", \"p\": \"0.57\"},\n        {\"a\": \"a3\", \"b\": \"b1\", \"c\": \"y\", \"p\": \"0.35\"},\n        {\"a\": \"a3\", \"b\": \"b1\", \"c\": \"z\", \"p\": \"0.49\"},\n        {\"a\": \"a3\", \"b\": \"b2\", \"c\": \"x\", \"p\": \"0.91\"},\n        {\"a\": \"a3\", \"b\": \"b2\", \"c\": \"y\", \"p\": \"0.38\"},\n        {\"a\": \"a3\", \"b\": \"b2\", \"c\": \"z\", \"p\": \"0.91\"},\n        {\"a\": \"a3\", \"b\": \"b3\", \"c\": \"x\", \"p\": \"0.99\"},\n        {\"a\": \"a3\", \"b\": \"b3\", \"c\": \"y\", \"p\": \"0.80\"},\n        {\"a\": \"a3\", \"b\": \"b3\", \"c\": \"z\", \"p\": \"0.37\"},\n    ]\n)\n\nalt.Chart(source, width=60, height=alt.Step(8)).mark_bar().encode(\n    alt.Y(\"c:N\").axis(None),\n    alt.X(\"p:Q\").title(None).axis(format=\"%\"),\n    alt.Color(\"c:N\").title(\"settings\").legend(orient=\"bottom\", titleOrient=\"left\"),\n    alt.Row(\"a:N\").title(\"Factor A\").header(labelAngle=0),\n    alt.Column(\"b:N\").title(\"Factor B\"),\n).interactive()\n\n\n\n\n\n\n\n\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.stocks()\n\nhighlight = alt.selection_point(on='mouseover', fields=['symbol'], nearest=True)\n\nbase = alt.Chart(source).encode(\n    x='date:T',\n    y='price:Q',\n    color='symbol:N'\n)\n\npoints = base.mark_circle().encode(\n    opacity=alt.value(0)\n).add_params(\n    highlight\n).properties(\n    width=600\n)\n\nlines = base.mark_line().encode(\n    size=alt.condition(~highlight, alt.value(1), alt.value(3))\n)\n\npoints + lines\n\n\n\n\n\n\n\n\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.unemployment_across_industries.url\n\nselection = alt.selection_point(fields=['series'], bind='legend')\n\nalt.Chart(source).mark_area().encode(\n    alt.X('yearmonth(date):T').axis(domain=False, format='%Y', tickSize=0),\n    alt.Y('sum(count):Q').stack('center').axis(None),\n    alt.Color('series:N').scale(scheme='category20b'),\n    opacity=alt.condition(selection, alt.value(1), alt.value(0.2))\n).add_params(\n    selection\n)\n\n\n\n\n\n\n\n\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars()\n\nalt.Chart(source).mark_circle().encode(\n    alt.X(alt.repeat(\"column\"), type='quantitative'),\n    alt.Y(alt.repeat(\"row\"), type='quantitative'),\n    color='Origin:N'\n).properties(\n    width=150,\n    height=150\n).repeat(\n    row=['Horsepower', 'Acceleration', 'Miles_per_Gallon'],\n    column=['Miles_per_Gallon', 'Acceleration', 'Horsepower']\n).interactive()\n\n\n\n\n\n\n\n\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.seattle_weather.url\n\nstep = 20\noverlap = 1\n\nalt.Chart(source, height=step).transform_timeunit(\n    Month='month(date)'\n).transform_joinaggregate(\n    mean_temp='mean(temp_max)', groupby=['Month']\n).transform_bin(\n    ['bin_max', 'bin_min'], 'temp_max'\n).transform_aggregate(\n    value='count()', groupby=['Month', 'mean_temp', 'bin_min', 'bin_max']\n).transform_impute(\n    impute='value', groupby=['Month', 'mean_temp'], key='bin_min', value=0\n).mark_area(\n    interpolate='monotone',\n    fillOpacity=0.8,\n    stroke='lightgray',\n    strokeWidth=0.5\n).encode(\n    alt.X('bin_min:Q')\n        .bin('binned')\n        .title('Maximum Daily Temperature (C)'),\n    alt.Y('value:Q')\n        .axis(None)\n        .scale(range=[step, -step * overlap]),\n    alt.Fill('mean_temp:Q')\n        .legend(None)\n        .scale(domain=[30, 5], scheme='redyellowblue')\n).facet(\n    row=alt.Row('Month:T')\n        .title(None)\n        .header(labelAngle=0, labelAlign='left', format='%B')\n).properties(\n    title='Seattle Weather',\n    bounds='flush'\n).configure_facet(\n    spacing=0\n).configure_view(\n    stroke=None\n).configure_title(\n    anchor='end'\n)\n\n\n\n\n\n\n\n\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.seattle_weather()\n\nalt.Chart(source, title=\"Daily Max Temperatures (C) in Seattle, WA\").mark_rect().encode(\n    alt.X(\"date(date):O\").title(\"Day\").axis(format=\"%e\", labelAngle=0),\n    alt.Y(\"month(date):O\").title(\"Month\"),\n    alt.Color(\"max(temp_max)\").title(None),\n    tooltip=[\n        alt.Tooltip(\"monthdate(date)\", title=\"Date\"),\n        alt.Tooltip(\"max(temp_max)\", title=\"Max Temp\"),\n    ],\n).configure_view(\n    step=13,\n    strokeWidth=0\n).configure_axis(\n    domain=False\n)\n\n\n\n\n\n\n\n\nimport altair as alt\nfrom vega_datasets import data\n\nstates = alt.topo_feature(data.us_10m.url, 'states')\nsource = data.income.url\n\nalt.Chart(source).mark_geoshape().encode(\n    shape='geo:G',\n    color='pct:Q',\n    tooltip=['name:N', 'pct:Q'],\n    facet=alt.Facet('group:N', columns=2),\n).transform_lookup(\n    lookup='id',\n    from_=alt.LookupData(data=states, key='id'),\n    as_='geo'\n).properties(\n    width=300,\n    height=175,\n).project(\n    type='albersUsa'\n)\n\n\n\n\n\n\n\n\nimport altair as alt\nfrom vega_datasets import data\nimport geopandas as gpd\n\n# load data\ngdf_quakies = gpd.read_file(data.earthquakes.url, driver=\"GeoJSON\")\ngdf_world = gpd.read_file(data.world_110m.url, driver=\"TopoJSON\")\n\n# defintion for interactive brush\nbrush = alt.selection_interval(\n    encodings=[\"longitude\"],\n    empty=False,\n    value={\"longitude\": [-50, -110]}\n)\n\n# world disk\nsphere = alt.Chart(alt.sphere()).mark_geoshape(\n    fill=\"transparent\", stroke=\"lightgray\", strokeWidth=1\n)\n\n# countries as shapes\nworld = alt.Chart(gdf_world).mark_geoshape(\n    fill=\"lightgray\", stroke=\"white\", strokeWidth=0.1\n)\n\n# earthquakes as dots on map\nquakes = alt.Chart(gdf_quakies).transform_calculate(\n    lon=\"datum.geometry.coordinates[0]\",\n    lat=\"datum.geometry.coordinates[1]\",\n).mark_circle(opacity=0.35, tooltip=True).encode(\n    longitude=\"lon:Q\",\n    latitude=\"lat:Q\",\n    color=alt.condition(brush, alt.value(\"goldenrod\"), alt.value(\"steelblue\")),\n    size=alt.Size(\"mag:Q\").scale(type=\"pow\", range=[1, 1000], domain=[0, 7], exponent=4),\n).add_params(brush)\n\n# combine layers for the map\nleft_map = alt.layer(sphere, world, quakes).project(type=\"mercator\")\n\n# histogram of binned earthquakes\nbars = alt.Chart(gdf_quakies).mark_bar().encode(\n    x=alt.X(\"mag:Q\").bin(extent=[0,7]),\n    y=\"count(mag):Q\",\n    color=alt.value(\"steelblue\")\n)\n\n# filtered earthquakes\nbars_overlay = bars.encode(color=alt.value(\"goldenrod\")).transform_filter(brush)\n\n# combine layers for histogram\nright_bars = alt.layer(bars, bars_overlay)\n\n# vertical concatenate map and bars\nleft_map | right_bars\n\n\n\n\n\n\n\n\nimport altair as alt\nimport pandas as pd\nimport numpy as np\n\nnp.random.seed(0)\n\nn_objects = 20\nn_times = 50\n\n# Create one (x, y) pair of metadata per object\nlocations = pd.DataFrame({\n    'id': range(n_objects),\n    'x': np.random.randn(n_objects),\n    'y': np.random.randn(n_objects)\n})\n\n# Create a 50-element time-series for each object\ntimeseries = pd.DataFrame(np.random.randn(n_times, n_objects).cumsum(0),\n                          columns=locations['id'],\n                          index=pd.RangeIndex(0, n_times, name='time'))\n\n# Melt the wide-form timeseries into a long-form view\ntimeseries = timeseries.reset_index().melt('time')\n\n# Merge the (x, y) metadata into the long-form view\ntimeseries['id'] = timeseries['id'].astype(int)  # make merge not complain\ndata = pd.merge(timeseries, locations, on='id')\n\n# Data is prepared, now make a chart\n\nselector = alt.selection_point(fields=['id'])\n\nbase = alt.Chart(data).properties(\n    width=250,\n    height=250\n).add_params(selector)\n\npoints = base.mark_point(filled=True, size=200).encode(\n    x='mean(x)',\n    y='mean(y)',\n    color=alt.condition(selector, 'id:O', alt.value('lightgray'), legend=None),\n)\n\ntimeseries = base.mark_line().encode(\n    x='time',\n    y=alt.Y('value').scale(domain=(-15, 15)),\n    color=alt.Color('id:O').legend(None)\n).transform_filter(\n    selector\n)\n\npoints | timeseries\n\n\n\n\n\n\n\n\nimport altair as alt\nimport vega_datasets\n\nalt.Chart(\n    vega_datasets.data.barley.url,\n    title='Barley Yield comparison between 1932 and 1931'\n).mark_trail().encode(\n    alt.X('year:O').title(None),\n    alt.Y('variety:N').title('Variety'),\n    alt.Size('yield:Q')\n        .scale(range=[0, 12])\n        .legend(values=[20, 60])\n        .title('Barley Yield (bushels/acre)'),\n    alt.Color('delta:Q')\n        .scale(domainMid=0)\n        .title('Yield Delta (%)'),\n    alt.Tooltip(['year:O', 'yield:Q']),\n    alt.Column('site:N').title('Site')\n).transform_pivot(\n    \"year\",\n    value=\"yield\",\n    groupby=[\"variety\", \"site\"]\n).transform_fold(\n    [\"1931\", \"1932\"],\n    as_=[\"year\", \"yield\"]\n).transform_calculate(\n    calculate=\"datum['1932'] - datum['1931']\",\n    as_=\"delta\"\n).configure_legend(\n    orient='bottom',\n    direction='horizontal'\n).configure_view(\n    stroke=None\n)\n\n\n\n\n\n\n\n\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.disasters.url\n\nalt.Chart(source).transform_filter(\n    alt.datum.Entity != 'All natural disasters'\n).mark_circle(\n    opacity=0.8,\n    stroke='black',\n    strokeWidth=1,\n    strokeOpacity=0.4\n).encode(\n    alt.X('Year:T')\n        .title(None)\n        .scale(domain=['1899','2018']),\n    alt.Y('Entity:N')\n        .title(None)\n        .sort(field=\"Deaths\", op=\"sum\", order='descending'),\n    alt.Size('Deaths:Q')\n        .scale(range=[0, 2500])\n        .title('Deaths')\n        .legend(clipHeight=30, format='s'),\n    alt.Color('Entity:N').legend(None),\n    tooltip=[\n        \"Entity:N\",\n        alt.Tooltip(\"Year:T\", format='%Y'),\n        alt.Tooltip(\"Deaths:Q\", format='~s')\n    ],\n).properties(\n    width=450,\n    height=320,\n    title=alt.Title(\n        text=\"Global Deaths from Natural Disasters (1900-2017)\",\n        subtitle=\"The size of the bubble represents the total death count per year, by type of disaster\",\n        anchor='start'\n    )\n).configure_axisY(\n    domain=False,\n    ticks=False,\n    offset=10\n).configure_axisX(\n    grid=False,\n).configure_view(\n    stroke=None\n)\n\n\n\n\n\n\n\n\nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.seattle_weather()\n\ncolor = alt.Color('weather:N').scale(\n    domain=['sun', 'fog', 'drizzle', 'rain', 'snow'],\n    range=['#e7ba52', '#a7a7a7', '#aec7e8', '#1f77b4', '#9467bd']\n)\n\n# We create two selections:\n# - a brush that is active on the top panel\n# - a multi-click that is active on the bottom panel\nbrush = alt.selection_interval(encodings=['x'])\nclick = alt.selection_point(encodings=['color'])\n\n# Top panel is scatter plot of temperature vs time\npoints = alt.Chart().mark_point().encode(\n    alt.X('monthdate(date):T').title('Date'),\n    alt.Y('temp_max:Q')\n        .title('Maximum Daily Temperature (C)')\n        .scale(domain=[-5, 40]),\n    alt.Size('precipitation:Q').scale(range=[5, 200]),\n    color=alt.condition(brush, color, alt.value('lightgray')),\n).properties(\n    width=550,\n    height=300\n).add_params(\n    brush\n).transform_filter(\n    click\n)\n\n# Bottom panel is a bar chart of weather type\nbars = alt.Chart().mark_bar().encode(\n    x='count()',\n    y='weather:N',\n    color=alt.condition(click, color, alt.value('lightgray')),\n).transform_filter(\n    brush\n).properties(\n    width=550,\n).add_params(\n    click\n)\n\nalt.vconcat(\n    points,\n    bars,\n    data=source,\n    title=\"Seattle Weather: 2012-2015\"\n)\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "tmux.html#list-sess",
    "href": "tmux.html#list-sess",
    "title": "Tmux",
    "section": "List Sess",
    "text": "List Sess"
  },
  {
    "objectID": "tmux.html#list-session",
    "href": "tmux.html#list-session",
    "title": "Tmux",
    "section": "List Session",
    "text": "List Session\ntmux ls\ntmux list-sessions\ntmux new -s &lt;session name&gt;"
  },
  {
    "objectID": "tmux.html#attach-session",
    "href": "tmux.html#attach-session",
    "title": "Tmux",
    "section": "Attach Session",
    "text": "Attach Session\ntmux a\ntmux at\ntmux a -t &lt;session name&gt;"
  },
  {
    "objectID": "tmux.html#kill-session",
    "href": "tmux.html#kill-session",
    "title": "Tmux",
    "section": "Kill Session",
    "text": "Kill Session\ntmux kill-session -t &lt;session name&gt;"
  },
  {
    "objectID": "tmux.html#session",
    "href": "tmux.html#session",
    "title": "Tmux",
    "section": "",
    "text": "tmux\ntmux new\ntmux new -s &lt;session name&gt;\n\n\n\ntmux ls\ntmux list-sessions\ntmux new -s &lt;session name&gt;\n\n\n\ntmux a\ntmux at\ntmux a -t &lt;session name&gt;\n\n\n\ntmux kill-session -t &lt;session name&gt;\n\n\n\nCtrl + b $\n\n\n\nCtrl + b d\n\n\n\nCtrl + b w\n\n\n\nCtrl + b (\n\n\n\nCtrl + b )"
  },
  {
    "objectID": "tmux.html#shortcuts",
    "href": "tmux.html#shortcuts",
    "title": "Tmux",
    "section": "Shortcuts",
    "text": "Shortcuts\n\nRename session\n\nCtrl + b $\n\nDetach from session\n\nCtrl + b d\n\nSession and Window Preview\n\nCtrl + b w\n\nMove to previous session\n\nCtrl + b (\n\nMove to next session\n\nCtrl + b )"
  },
  {
    "objectID": "tmux.html#windows",
    "href": "tmux.html#windows",
    "title": "Tmux",
    "section": "Windows",
    "text": "Windows\n\nCreate session with named window\ntmux new -s mysession -n mywindow\n\n\nCreate new window\nCtrl + b c\n\n\nRename current window\nCtrl + b ,\n\n\nClose current window\nCtrl + b &\n\n\nList window\nCtrl + b w\n\n\nPrevious window\nCtrl + b p\n\n\nNext window\nCtrl + b n\n\n\nSwitch to window by number\nCtrl + b 0...9"
  },
  {
    "objectID": "tmux.html#create-session-with-named-window",
    "href": "tmux.html#create-session-with-named-window",
    "title": "Tmux",
    "section": "Create session with named window",
    "text": "Create session with named window\ntmux new -s mysession -n mywindow"
  },
  {
    "objectID": "tmux.html#panes",
    "href": "tmux.html#panes",
    "title": "Tmux",
    "section": "Panes",
    "text": "Panes\n\nSplit window vertically\nCtrl + b %\n\n\nSplit window horizontally\nCtrl + b \"\n\n\nNavigate panes\nCtrl + b up, down, right, left\n\n\nClose current pane\nCtrl + b x\n\n\nMove the current pane left\nCtrl + b {\n\n\nMove the current pane right\nCtrl + b }\n\n\nSwitch to next pane\nCtrl + b o\n\n\nShow pane numbers\nCtrl + b q 0...9\n\n\nConvert pane to window\nCtrl + b !\n\n\nToggle pane zoom\nCtrl + b z\n\n\nResize pane\nCtrl + b + up, down, right, left"
  },
  {
    "objectID": "tmux.html#rename-session",
    "href": "tmux.html#rename-session",
    "title": "Tmux",
    "section": "Rename session",
    "text": "Rename session\nCtrl + b $"
  },
  {
    "objectID": "tmux.html#detach-from-session",
    "href": "tmux.html#detach-from-session",
    "title": "Tmux",
    "section": "Detach from session",
    "text": "Detach from session\nCtrl + b d"
  },
  {
    "objectID": "tmux.html#session-and-window-preview",
    "href": "tmux.html#session-and-window-preview",
    "title": "Tmux",
    "section": "Session and Window Preview",
    "text": "Session and Window Preview\nCtrl + b w"
  },
  {
    "objectID": "tmux.html#move-to-previous-session",
    "href": "tmux.html#move-to-previous-session",
    "title": "Tmux",
    "section": "Move to previous session",
    "text": "Move to previous session\nCtrl + b ("
  },
  {
    "objectID": "tmux.html#move-to-next-session",
    "href": "tmux.html#move-to-next-session",
    "title": "Tmux",
    "section": "Move to next session",
    "text": "Move to next session\nCtrl + b )"
  }
]